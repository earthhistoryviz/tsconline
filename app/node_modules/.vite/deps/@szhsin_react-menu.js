import {
  require_react_dom
} from "./chunk-ETAAOVAS.js";
import {
  require_prop_types
} from "./chunk-5QDABGYX.js";
import {
  require_jsx_runtime
} from "./chunk-RRIIJOKG.js";
import {
  require_react
} from "./chunk-WTXCOHDA.js";
import {
  __toESM
} from "./chunk-AC2VUBZ6.js";

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/MenuButton.js
var import_react3 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
var import_jsx_runtime = __toESM(require_jsx_runtime());

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/utils/utils.js
var import_react_dom = __toESM(require_react_dom());
var isMenuOpen = (state) => !!state && state[0] === "o";
var batchedUpdates = import_react_dom.unstable_batchedUpdates || ((callback) => callback());
var values = Object.values || ((obj) => Object.keys(obj).map((key) => obj[key]));
var floatEqual = (a, b, diff = 1e-4) => Math.abs(a - b) < diff;
var getTransition = (transition, name) => transition === true || !!(transition && transition[name]);
var safeCall = (fn, arg) => typeof fn === "function" ? fn(arg) : fn;
var internalKey = "_szhsinMenu";
var getName = (component) => component[internalKey];
var defineName = (name, component) => Object.defineProperty(component, internalKey, {
  value: name
});
var mergeProps = (target, source) => {
  source && Object.keys(source).forEach((key) => {
    const targetProp = target[key];
    const sourceProp = source[key];
    if (typeof sourceProp === "function" && targetProp) {
      target[key] = (...arg) => {
        sourceProp(...arg);
        targetProp(...arg);
      };
    } else {
      target[key] = sourceProp;
    }
  });
  return target;
};
var parsePadding = (paddingStr) => {
  if (typeof paddingStr !== "string")
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  const padding = paddingStr.trim().split(/\s+/, 4).map(parseFloat);
  const top = !isNaN(padding[0]) ? padding[0] : 0;
  const right = !isNaN(padding[1]) ? padding[1] : top;
  return {
    top,
    right,
    bottom: !isNaN(padding[2]) ? padding[2] : top,
    left: !isNaN(padding[3]) ? padding[3] : right
  };
};
var getScrollAncestor = (node3) => {
  while (node3) {
    node3 = node3.parentNode;
    if (!node3 || node3 === document.body || !node3.parentNode)
      return;
    const {
      overflow,
      overflowX,
      overflowY
    } = getComputedStyle(node3);
    if (/auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX))
      return node3;
  }
};
function commonProps(isDisabled, isHovering) {
  return {
    "aria-disabled": isDisabled || void 0,
    tabIndex: isHovering ? 0 : -1
  };
}
function indexOfNode(nodeList, node3) {
  for (let i = 0; i < nodeList.length; i++) {
    if (nodeList[i] === node3)
      return i;
  }
  return -1;
}

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/utils/propTypes.js
var import_prop_types = __toESM(require_prop_types());
var stylePropTypes = (name) => ({
  [name ? `${name}ClassName` : "className"]: (0, import_prop_types.oneOfType)([import_prop_types.string, import_prop_types.func])
});
var menuPropTypes = {
  className: import_prop_types.string,
  ...stylePropTypes("menu"),
  arrowProps: import_prop_types.object,
  focusProps: import_prop_types.object,
  menuStyle: import_prop_types.object,
  arrow: import_prop_types.bool,
  setDownOverflow: import_prop_types.bool,
  gap: import_prop_types.number,
  shift: import_prop_types.number,
  align: (0, import_prop_types.oneOf)(["start", "center", "end"]),
  direction: (0, import_prop_types.oneOf)(["left", "right", "top", "bottom"]),
  position: (0, import_prop_types.oneOf)(["auto", "anchor", "initial"]),
  overflow: (0, import_prop_types.oneOf)(["auto", "visible", "hidden"])
};
var rootMenuPropTypes = {
  ...menuPropTypes,
  containerProps: import_prop_types.object,
  initialMounted: import_prop_types.bool,
  unmountOnClose: import_prop_types.bool,
  transition: (0, import_prop_types.oneOfType)([import_prop_types.bool, (0, import_prop_types.exact)({
    open: import_prop_types.bool,
    close: import_prop_types.bool,
    item: import_prop_types.bool
  })]),
  transitionTimeout: import_prop_types.number,
  boundingBoxRef: import_prop_types.object,
  boundingBoxPadding: import_prop_types.string,
  reposition: (0, import_prop_types.oneOf)(["auto", "initial"]),
  repositionFlag: (0, import_prop_types.oneOfType)([import_prop_types.string, import_prop_types.number]),
  viewScroll: (0, import_prop_types.oneOf)(["auto", "close", "initial"]),
  submenuOpenDelay: import_prop_types.number,
  submenuCloseDelay: import_prop_types.number,
  portal: (0, import_prop_types.oneOfType)([import_prop_types.bool, (0, import_prop_types.exact)({
    target: import_prop_types.object,
    stablePosition: import_prop_types.bool
  })]),
  theming: import_prop_types.string,
  onItemClick: import_prop_types.func
};
var uncontrolledMenuPropTypes = {
  instanceRef: (0, import_prop_types.oneOfType)([import_prop_types.object, import_prop_types.func]),
  onMenuChange: import_prop_types.func
};

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/hooks/useBEM.js
var import_react = __toESM(require_react());
var useBEM = ({
  block,
  element: element2,
  modifiers,
  className
}) => (0, import_react.useMemo)(() => {
  const blockElement = element2 ? `${block}__${element2}` : block;
  let classString = blockElement;
  modifiers && Object.keys(modifiers).forEach((name) => {
    const value = modifiers[name];
    if (value)
      classString += ` ${blockElement}--${value === true ? name : `${name}-${value}`}`;
  });
  let expandedClassName = typeof className === "function" ? className(modifiers) : className;
  if (typeof expandedClassName === "string") {
    expandedClassName = expandedClassName.trim();
    if (expandedClassName)
      classString += ` ${expandedClassName}`;
  }
  return classString;
}, [block, element2, modifiers, className]);

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/utils/constants.js
var import_react2 = __toESM(require_react());
var menuContainerClass = "szh-menu-container";
var menuClass = "szh-menu";
var menuButtonClass = "szh-menu-button";
var menuArrowClass = "arrow";
var menuItemClass = "item";
var menuDividerClass = "divider";
var menuHeaderClass = "header";
var menuGroupClass = "group";
var subMenuClass = "submenu";
var radioGroupClass = "radio-group";
var HoverItemContext = (0, import_react2.createContext)();
var MenuListItemContext = (0, import_react2.createContext)({});
var MenuListContext = (0, import_react2.createContext)({});
var EventHandlersContext = (0, import_react2.createContext)({});
var RadioGroupContext = (0, import_react2.createContext)({});
var SettingsContext = (0, import_react2.createContext)({});
var Keys = Object.freeze({
  ENTER: "Enter",
  ESC: "Escape",
  SPACE: " ",
  HOME: "Home",
  END: "End",
  LEFT: "ArrowLeft",
  RIGHT: "ArrowRight",
  UP: "ArrowUp",
  DOWN: "ArrowDown"
});
var HoverActionTypes = Object.freeze({
  RESET: 0,
  SET: 1,
  UNSET: 2,
  INCREASE: 3,
  DECREASE: 4,
  FIRST: 5,
  LAST: 6,
  SET_INDEX: 7
});
var CloseReason = Object.freeze({
  CLICK: "click",
  CANCEL: "cancel",
  BLUR: "blur",
  SCROLL: "scroll"
});
var FocusPositions = Object.freeze({
  FIRST: "first",
  LAST: "last"
});
var MenuStateMap = Object.freeze({
  entering: "opening",
  entered: "open",
  exiting: "closing",
  exited: "closed"
});
var positionAbsolute = "absolute";
var roleNone = "presentation";
var roleMenuitem = "menuitem";
var dummyItemProps = {
  "aria-hidden": true,
  role: roleMenuitem
};

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/MenuButton.js
var MenuButton = defineName("MenuButton", (0, import_react3.forwardRef)(function MenuButton2({
  className,
  isOpen,
  disabled,
  children,
  ...restProps
}, ref) {
  const modifiers = (0, import_react3.useMemo)(() => ({
    open: isOpen
  }), [isOpen]);
  return (0, import_jsx_runtime.jsx)("button", {
    "aria-haspopup": true,
    "aria-expanded": isOpen,
    "aria-disabled": disabled || void 0,
    type: "button",
    disabled,
    ...restProps,
    ref,
    className: useBEM({
      block: menuButtonClass,
      modifiers,
      className
    }),
    children
  });
}));
true ? MenuButton.propTypes = {
  ...stylePropTypes(),
  isOpen: import_prop_types2.bool,
  disabled: import_prop_types2.bool
} : void 0;

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/Menu.js
var import_react15 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/ControlledMenu.js
var import_react9 = __toESM(require_react());
var import_react_dom3 = __toESM(require_react_dom());
var import_prop_types3 = __toESM(require_prop_types());

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/MenuList.js
var import_react8 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/MenuContainer.js
var import_react4 = __toESM(require_react());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var MenuContainer = ({
  className,
  containerRef,
  containerProps,
  children,
  isOpen,
  theming,
  transition,
  onClose
}) => {
  const itemTransition = getTransition(transition, "item");
  const onKeyDown = ({
    key
  }) => {
    switch (key) {
      case Keys.ESC:
        safeCall(onClose, {
          key,
          reason: CloseReason.CANCEL
        });
        break;
    }
  };
  const onBlur = (e) => {
    if (isOpen && !e.currentTarget.contains(e.relatedTarget)) {
      safeCall(onClose, {
        reason: CloseReason.BLUR
      });
    }
  };
  return (0, import_jsx_runtime2.jsx)("div", {
    ...mergeProps({
      onKeyDown,
      onBlur
    }, containerProps),
    className: useBEM({
      block: menuContainerClass,
      modifiers: (0, import_react4.useMemo)(() => ({
        theme: theming,
        itemTransition
      }), [theming, itemTransition]),
      className
    }),
    style: {
      position: "absolute",
      ...containerProps == null ? void 0 : containerProps.style
    },
    ref: containerRef,
    children
  });
};

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/MenuList.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/utils/submenuCtx.js
var createSubmenuCtx = () => {
  let timer, count = 0;
  return {
    toggle: (isOpen) => {
      isOpen ? count++ : count--;
      count = Math.max(count, 0);
    },
    on: (closeDelay, pending, settled) => {
      if (count) {
        if (!timer)
          timer = setTimeout(() => {
            timer = 0;
            pending();
          }, closeDelay);
      } else {
        settled == null || settled();
      }
    },
    off: () => {
      if (timer) {
        clearTimeout(timer);
        timer = 0;
      }
    }
  };
};

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/hooks/useItems.js
var import_react5 = __toESM(require_react());
var useItems = (menuRef, focusRef) => {
  const [hoverItem, setHoverItem] = (0, import_react5.useState)();
  const stateRef = (0, import_react5.useRef)({
    items: [],
    hoverIndex: -1,
    sorted: false
  });
  const mutableState = stateRef.current;
  const updateItems = (0, import_react5.useCallback)((item, isMounted) => {
    const {
      items
    } = mutableState;
    if (!item) {
      mutableState.items = [];
    } else if (isMounted) {
      items.push(item);
    } else {
      const index = items.indexOf(item);
      if (index > -1) {
        items.splice(index, 1);
        if (item.contains(document.activeElement)) {
          focusRef.current.focus();
          setHoverItem();
        }
      }
    }
    mutableState.hoverIndex = -1;
    mutableState.sorted = false;
  }, [mutableState, focusRef]);
  const dispatch = (0, import_react5.useCallback)((actionType, item, nextIndex) => {
    const {
      items,
      hoverIndex
    } = mutableState;
    const sortItems = () => {
      if (mutableState.sorted)
        return;
      const orderedNodes = menuRef.current.querySelectorAll(".szh-menu__item");
      items.sort((a, b) => indexOfNode(orderedNodes, a) - indexOfNode(orderedNodes, b));
      mutableState.sorted = true;
    };
    let index = -1, newItem = void 0;
    switch (actionType) {
      case HoverActionTypes.RESET:
        break;
      case HoverActionTypes.SET:
        newItem = item;
        break;
      case HoverActionTypes.UNSET:
        newItem = (prevItem) => prevItem === item ? void 0 : prevItem;
        break;
      case HoverActionTypes.FIRST:
        sortItems();
        index = 0;
        newItem = items[index];
        break;
      case HoverActionTypes.LAST:
        sortItems();
        index = items.length - 1;
        newItem = items[index];
        break;
      case HoverActionTypes.SET_INDEX:
        sortItems();
        index = nextIndex;
        newItem = items[index];
        break;
      case HoverActionTypes.INCREASE:
        sortItems();
        index = hoverIndex;
        if (index < 0)
          index = items.indexOf(item);
        index++;
        if (index >= items.length)
          index = 0;
        newItem = items[index];
        break;
      case HoverActionTypes.DECREASE:
        sortItems();
        index = hoverIndex;
        if (index < 0)
          index = items.indexOf(item);
        index--;
        if (index < 0)
          index = items.length - 1;
        newItem = items[index];
        break;
      default:
        if (true)
          throw new Error(`[React-Menu] Unknown hover action type: ${actionType}`);
    }
    if (!newItem)
      index = -1;
    setHoverItem(newItem);
    mutableState.hoverIndex = index;
  }, [menuRef, mutableState]);
  return {
    hoverItem,
    dispatch,
    updateItems
  };
};

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/positionUtils/getPositionHelpers.js
var getPositionHelpers = (containerRef, menuRef, menuScroll, boundingBoxPadding) => {
  const menuRect = menuRef.current.getBoundingClientRect();
  const containerRect = containerRef.current.getBoundingClientRect();
  const boundingRect = menuScroll === window ? {
    left: 0,
    top: 0,
    right: document.documentElement.clientWidth,
    bottom: window.innerHeight
  } : menuScroll.getBoundingClientRect();
  const padding = parsePadding(boundingBoxPadding);
  const getLeftOverflow = (x) => x + containerRect.left - boundingRect.left - padding.left;
  const getRightOverflow = (x) => x + containerRect.left + menuRect.width - boundingRect.right + padding.right;
  const getTopOverflow = (y) => y + containerRect.top - boundingRect.top - padding.top;
  const getBottomOverflow = (y) => y + containerRect.top + menuRect.height - boundingRect.bottom + padding.bottom;
  const confineHorizontally = (x) => {
    let leftOverflow = getLeftOverflow(x);
    if (leftOverflow < 0) {
      x -= leftOverflow;
    } else {
      const rightOverflow = getRightOverflow(x);
      if (rightOverflow > 0) {
        x -= rightOverflow;
        leftOverflow = getLeftOverflow(x);
        if (leftOverflow < 0)
          x -= leftOverflow;
      }
    }
    return x;
  };
  const confineVertically = (y) => {
    let topOverflow = getTopOverflow(y);
    if (topOverflow < 0) {
      y -= topOverflow;
    } else {
      const bottomOverflow = getBottomOverflow(y);
      if (bottomOverflow > 0) {
        y -= bottomOverflow;
        topOverflow = getTopOverflow(y);
        if (topOverflow < 0)
          y -= topOverflow;
      }
    }
    return y;
  };
  return {
    menuRect,
    containerRect,
    getLeftOverflow,
    getRightOverflow,
    getTopOverflow,
    getBottomOverflow,
    confineHorizontally,
    confineVertically
  };
};

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/positionUtils/placeArrowVertical.js
var placeArrowVertical = ({
  arrowRef,
  menuY,
  anchorRect,
  containerRect,
  menuRect
}) => {
  let y = anchorRect.top - containerRect.top - menuY + anchorRect.height / 2;
  const offset = arrowRef.current.offsetHeight * 1.25;
  y = Math.max(offset, y);
  y = Math.min(y, menuRect.height - offset);
  return y;
};

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/positionUtils/placeLeftorRight.js
var placeLeftorRight = ({
  anchorRect,
  containerRect,
  menuRect,
  placeLeftorRightY,
  placeLeftX,
  placeRightX,
  getLeftOverflow,
  getRightOverflow,
  confineHorizontally,
  confineVertically,
  arrowRef,
  arrow,
  direction,
  position
}) => {
  let computedDirection = direction;
  let y = placeLeftorRightY;
  if (position !== "initial") {
    y = confineVertically(y);
    if (position === "anchor") {
      y = Math.min(y, anchorRect.bottom - containerRect.top);
      y = Math.max(y, anchorRect.top - containerRect.top - menuRect.height);
    }
  }
  let x, leftOverflow, rightOverflow;
  if (computedDirection === "left") {
    x = placeLeftX;
    if (position !== "initial") {
      leftOverflow = getLeftOverflow(x);
      if (leftOverflow < 0) {
        rightOverflow = getRightOverflow(placeRightX);
        if (rightOverflow <= 0 || -leftOverflow > rightOverflow) {
          x = placeRightX;
          computedDirection = "right";
        }
      }
    }
  } else {
    x = placeRightX;
    if (position !== "initial") {
      rightOverflow = getRightOverflow(x);
      if (rightOverflow > 0) {
        leftOverflow = getLeftOverflow(placeLeftX);
        if (leftOverflow >= 0 || -leftOverflow < rightOverflow) {
          x = placeLeftX;
          computedDirection = "left";
        }
      }
    }
  }
  if (position === "auto")
    x = confineHorizontally(x);
  const arrowY = arrow ? placeArrowVertical({
    menuY: y,
    arrowRef,
    anchorRect,
    containerRect,
    menuRect
  }) : void 0;
  return {
    arrowY,
    x,
    y,
    computedDirection
  };
};

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/positionUtils/placeArrowHorizontal.js
var placeArrowHorizontal = ({
  arrowRef,
  menuX,
  anchorRect,
  containerRect,
  menuRect
}) => {
  let x = anchorRect.left - containerRect.left - menuX + anchorRect.width / 2;
  const offset = arrowRef.current.offsetWidth * 1.25;
  x = Math.max(offset, x);
  x = Math.min(x, menuRect.width - offset);
  return x;
};

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/positionUtils/placeToporBottom.js
var placeToporBottom = ({
  anchorRect,
  containerRect,
  menuRect,
  placeToporBottomX,
  placeTopY,
  placeBottomY,
  getTopOverflow,
  getBottomOverflow,
  confineHorizontally,
  confineVertically,
  arrowRef,
  arrow,
  direction,
  position
}) => {
  let computedDirection = direction === "top" ? "top" : "bottom";
  let x = placeToporBottomX;
  if (position !== "initial") {
    x = confineHorizontally(x);
    if (position === "anchor") {
      x = Math.min(x, anchorRect.right - containerRect.left);
      x = Math.max(x, anchorRect.left - containerRect.left - menuRect.width);
    }
  }
  let y, topOverflow, bottomOverflow;
  if (computedDirection === "top") {
    y = placeTopY;
    if (position !== "initial") {
      topOverflow = getTopOverflow(y);
      if (topOverflow < 0) {
        bottomOverflow = getBottomOverflow(placeBottomY);
        if (bottomOverflow <= 0 || -topOverflow > bottomOverflow) {
          y = placeBottomY;
          computedDirection = "bottom";
        }
      }
    }
  } else {
    y = placeBottomY;
    if (position !== "initial") {
      bottomOverflow = getBottomOverflow(y);
      if (bottomOverflow > 0) {
        topOverflow = getTopOverflow(placeTopY);
        if (topOverflow >= 0 || -topOverflow < bottomOverflow) {
          y = placeTopY;
          computedDirection = "top";
        }
      }
    }
  }
  if (position === "auto")
    y = confineVertically(y);
  const arrowX = arrow ? placeArrowHorizontal({
    menuX: x,
    arrowRef,
    anchorRect,
    containerRect,
    menuRect
  }) : void 0;
  return {
    arrowX,
    x,
    y,
    computedDirection
  };
};

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/positionUtils/positionMenu.js
var positionMenu = ({
  arrow,
  align,
  direction,
  gap,
  shift,
  position,
  anchorRect,
  arrowRef,
  positionHelpers
}) => {
  const {
    menuRect,
    containerRect
  } = positionHelpers;
  const isHorizontal = direction === "left" || direction === "right";
  let horizontalOffset = isHorizontal ? gap : shift;
  let verticalOffset = isHorizontal ? shift : gap;
  if (arrow) {
    const arrowElt = arrowRef.current;
    if (isHorizontal) {
      horizontalOffset += arrowElt.offsetWidth;
    } else {
      verticalOffset += arrowElt.offsetHeight;
    }
  }
  const placeLeftX = anchorRect.left - containerRect.left - menuRect.width - horizontalOffset;
  const placeRightX = anchorRect.right - containerRect.left + horizontalOffset;
  const placeTopY = anchorRect.top - containerRect.top - menuRect.height - verticalOffset;
  const placeBottomY = anchorRect.bottom - containerRect.top + verticalOffset;
  let placeToporBottomX, placeLeftorRightY;
  if (align === "end") {
    placeToporBottomX = anchorRect.right - containerRect.left - menuRect.width;
    placeLeftorRightY = anchorRect.bottom - containerRect.top - menuRect.height;
  } else if (align === "center") {
    placeToporBottomX = anchorRect.left - containerRect.left - (menuRect.width - anchorRect.width) / 2;
    placeLeftorRightY = anchorRect.top - containerRect.top - (menuRect.height - anchorRect.height) / 2;
  } else {
    placeToporBottomX = anchorRect.left - containerRect.left;
    placeLeftorRightY = anchorRect.top - containerRect.top;
  }
  placeToporBottomX += horizontalOffset;
  placeLeftorRightY += verticalOffset;
  const options = {
    ...positionHelpers,
    anchorRect,
    placeLeftX,
    placeRightX,
    placeLeftorRightY,
    placeTopY,
    placeBottomY,
    placeToporBottomX,
    arrowRef,
    arrow,
    direction,
    position
  };
  switch (direction) {
    case "left":
    case "right":
      return placeLeftorRight(options);
    case "top":
    case "bottom":
    default:
      return placeToporBottom(options);
  }
};

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/hooks/useIsomorphicLayoutEffect.js
var import_react6 = __toESM(require_react());
var useIsomorphicLayoutEffect = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? import_react6.useLayoutEffect : import_react6.useEffect;

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/hooks/useCombinedRef.js
var import_react7 = __toESM(require_react());
function setRef(ref, instance) {
  typeof ref === "function" ? ref(instance) : ref.current = instance;
}
var useCombinedRef = (refA, refB) => (0, import_react7.useMemo)(() => {
  if (!refA)
    return refB;
  if (!refB)
    return refA;
  return (instance) => {
    setRef(refA, instance);
    setRef(refB, instance);
  };
}, [refA, refB]);

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/MenuList.js
var offScreen = -9999;
var MenuList = ({
  ariaLabel,
  menuClassName,
  menuStyle,
  arrow,
  arrowProps = {},
  anchorPoint,
  anchorRef,
  containerRef,
  containerProps,
  focusProps,
  externalRef,
  parentScrollingRef,
  align = "start",
  direction = "bottom",
  position = "auto",
  overflow = "visible",
  setDownOverflow,
  repositionFlag,
  captureFocus = true,
  state,
  endTransition,
  isDisabled,
  menuItemFocus,
  gap = 0,
  shift = 0,
  children,
  onClose,
  ...restProps
}) => {
  const [menuPosition, setMenuPosition] = (0, import_react8.useState)({
    x: offScreen,
    y: offScreen
  });
  const [arrowPosition, setArrowPosition] = (0, import_react8.useState)({});
  const [overflowData, setOverflowData] = (0, import_react8.useState)();
  const [expandedDirection, setExpandedDirection] = (0, import_react8.useState)(direction);
  const [submenuCtx] = (0, import_react8.useState)(createSubmenuCtx);
  const [reposSubmenu, forceReposSubmenu] = (0, import_react8.useReducer)((c) => c + 1, 1);
  const {
    transition,
    boundingBoxRef,
    boundingBoxPadding,
    rootMenuRef,
    rootAnchorRef,
    scrollNodesRef,
    reposition,
    viewScroll,
    submenuCloseDelay
  } = (0, import_react8.useContext)(SettingsContext);
  const {
    submenuCtx: parentSubmenuCtx,
    reposSubmenu: reposFlag = repositionFlag
  } = (0, import_react8.useContext)(MenuListContext);
  const menuRef = (0, import_react8.useRef)(null);
  const focusRef = (0, import_react8.useRef)();
  const arrowRef = (0, import_react8.useRef)();
  const prevOpen = (0, import_react8.useRef)(false);
  const latestMenuSize = (0, import_react8.useRef)({
    width: 0,
    height: 0
  });
  const latestHandlePosition = (0, import_react8.useRef)(() => {
  });
  const {
    hoverItem,
    dispatch,
    updateItems
  } = useItems(menuRef, focusRef);
  const isOpen = isMenuOpen(state);
  const openTransition = getTransition(transition, "open");
  const closeTransition = getTransition(transition, "close");
  const scrollNodes = scrollNodesRef.current;
  const onKeyDown = (e) => {
    switch (e.key) {
      case Keys.HOME:
        dispatch(HoverActionTypes.FIRST);
        break;
      case Keys.END:
        dispatch(HoverActionTypes.LAST);
        break;
      case Keys.UP:
        dispatch(HoverActionTypes.DECREASE, hoverItem);
        break;
      case Keys.DOWN:
        dispatch(HoverActionTypes.INCREASE, hoverItem);
        break;
      case Keys.SPACE:
        if (e.target && e.target.className.indexOf(menuClass) !== -1) {
          e.preventDefault();
        }
        return;
      default:
        return;
    }
    e.preventDefault();
    e.stopPropagation();
  };
  const onAnimationEnd = () => {
    if (state === "closing") {
      setOverflowData();
    }
    safeCall(endTransition);
  };
  const onPointerMove = (e) => {
    e.stopPropagation();
    submenuCtx.on(submenuCloseDelay, () => {
      dispatch(HoverActionTypes.RESET);
      focusRef.current.focus();
    });
  };
  const onPointerLeave = (e) => {
    if (e.target === e.currentTarget)
      submenuCtx.off();
  };
  const handlePosition = (0, import_react8.useCallback)((noOverflowCheck) => {
    var _anchorRef$current;
    const anchorRect = anchorRef ? (_anchorRef$current = anchorRef.current) == null ? void 0 : _anchorRef$current.getBoundingClientRect() : anchorPoint ? {
      left: anchorPoint.x,
      right: anchorPoint.x,
      top: anchorPoint.y,
      bottom: anchorPoint.y,
      width: 0,
      height: 0
    } : null;
    if (!anchorRect) {
      if (true) {
        console.warn("[React-Menu] Menu might not be positioned properly as one of the anchorRef or anchorPoint prop should be provided. If `anchorRef` is provided, the anchor must be mounted before menu is open.");
      }
      return;
    }
    if (!scrollNodes.menu) {
      scrollNodes.menu = (boundingBoxRef ? boundingBoxRef.current : getScrollAncestor(rootMenuRef.current)) || window;
    }
    const positionHelpers = getPositionHelpers(containerRef, menuRef, scrollNodes.menu, boundingBoxPadding);
    let {
      arrowX,
      arrowY,
      x,
      y,
      computedDirection
    } = positionMenu({
      arrow,
      align,
      direction,
      gap,
      shift,
      position,
      anchorRect,
      arrowRef,
      positionHelpers
    });
    const {
      menuRect
    } = positionHelpers;
    let menuHeight = menuRect.height;
    if (!noOverflowCheck && overflow !== "visible") {
      const {
        getTopOverflow,
        getBottomOverflow
      } = positionHelpers;
      let height, overflowAmt2;
      const prevHeight = latestMenuSize.current.height;
      const bottomOverflow = getBottomOverflow(y);
      if (bottomOverflow > 0 || floatEqual(bottomOverflow, 0) && floatEqual(menuHeight, prevHeight)) {
        height = menuHeight - bottomOverflow;
        overflowAmt2 = bottomOverflow;
      } else {
        const topOverflow = getTopOverflow(y);
        if (topOverflow < 0 || floatEqual(topOverflow, 0) && floatEqual(menuHeight, prevHeight)) {
          height = menuHeight + topOverflow;
          overflowAmt2 = 0 - topOverflow;
          if (height >= 0)
            y -= topOverflow;
        }
      }
      if (height >= 0) {
        menuHeight = height;
        setOverflowData({
          height,
          overflowAmt: overflowAmt2
        });
      } else {
        setOverflowData();
      }
    }
    if (arrow)
      setArrowPosition({
        x: arrowX,
        y: arrowY
      });
    setMenuPosition({
      x,
      y
    });
    setExpandedDirection(computedDirection);
    latestMenuSize.current = {
      width: menuRect.width,
      height: menuHeight
    };
  }, [arrow, align, boundingBoxPadding, direction, gap, shift, position, overflow, anchorPoint, anchorRef, containerRef, boundingBoxRef, rootMenuRef, scrollNodes]);
  useIsomorphicLayoutEffect(() => {
    if (isOpen) {
      handlePosition();
      if (prevOpen.current)
        forceReposSubmenu();
    }
    prevOpen.current = isOpen;
    latestHandlePosition.current = handlePosition;
  }, [isOpen, handlePosition, reposFlag]);
  useIsomorphicLayoutEffect(() => {
    if (overflowData && !setDownOverflow)
      menuRef.current.scrollTop = 0;
  }, [overflowData, setDownOverflow]);
  useIsomorphicLayoutEffect(() => updateItems, [updateItems]);
  (0, import_react8.useEffect)(() => {
    let {
      menu: menuScroll
    } = scrollNodes;
    if (!isOpen || !menuScroll)
      return;
    menuScroll = menuScroll.addEventListener ? menuScroll : window;
    if (!scrollNodes.anchors) {
      scrollNodes.anchors = [];
      let anchorScroll = getScrollAncestor(rootAnchorRef && rootAnchorRef.current);
      while (anchorScroll && anchorScroll !== menuScroll) {
        scrollNodes.anchors.push(anchorScroll);
        anchorScroll = getScrollAncestor(anchorScroll);
      }
    }
    let scroll = viewScroll;
    if (scrollNodes.anchors.length && scroll === "initial")
      scroll = "auto";
    if (scroll === "initial")
      return;
    const handleScroll = () => {
      if (scroll === "auto") {
        batchedUpdates(() => handlePosition(true));
      } else {
        safeCall(onClose, {
          reason: CloseReason.SCROLL
        });
      }
    };
    const scrollObservers = scrollNodes.anchors.concat(viewScroll !== "initial" ? menuScroll : []);
    scrollObservers.forEach((o) => o.addEventListener("scroll", handleScroll));
    return () => scrollObservers.forEach((o) => o.removeEventListener("scroll", handleScroll));
  }, [rootAnchorRef, scrollNodes, isOpen, onClose, viewScroll, handlePosition]);
  const hasOverflow = !!overflowData && overflowData.overflowAmt > 0;
  (0, import_react8.useEffect)(() => {
    if (hasOverflow || !isOpen || !parentScrollingRef)
      return;
    const handleScroll = () => batchedUpdates(handlePosition);
    const parentScroll = parentScrollingRef.current;
    parentScroll.addEventListener("scroll", handleScroll);
    return () => parentScroll.removeEventListener("scroll", handleScroll);
  }, [isOpen, hasOverflow, parentScrollingRef, handlePosition]);
  (0, import_react8.useEffect)(() => {
    if (typeof ResizeObserver !== "function" || reposition === "initial")
      return;
    const resizeObserver = new ResizeObserver(([entry]) => {
      const {
        borderBoxSize,
        target
      } = entry;
      let width, height;
      if (borderBoxSize) {
        const {
          inlineSize,
          blockSize
        } = borderBoxSize[0] || borderBoxSize;
        width = inlineSize;
        height = blockSize;
      } else {
        const borderRect = target.getBoundingClientRect();
        width = borderRect.width;
        height = borderRect.height;
      }
      if (width === 0 || height === 0)
        return;
      if (floatEqual(width, latestMenuSize.current.width, 1) && floatEqual(height, latestMenuSize.current.height, 1))
        return;
      (0, import_react_dom2.flushSync)(() => {
        latestHandlePosition.current();
        forceReposSubmenu();
      });
    });
    const observeTarget = menuRef.current;
    resizeObserver.observe(observeTarget, {
      box: "border-box"
    });
    return () => resizeObserver.unobserve(observeTarget);
  }, [reposition]);
  (0, import_react8.useEffect)(() => {
    if (!isOpen) {
      dispatch(HoverActionTypes.RESET);
      if (!closeTransition)
        setOverflowData();
      return;
    }
    const {
      position: position2,
      alwaysUpdate
    } = menuItemFocus || {};
    const setItemFocus = () => {
      if (position2 === FocusPositions.FIRST) {
        dispatch(HoverActionTypes.FIRST);
      } else if (position2 === FocusPositions.LAST) {
        dispatch(HoverActionTypes.LAST);
      } else if (position2 >= -1) {
        dispatch(HoverActionTypes.SET_INDEX, void 0, position2);
      }
    };
    if (alwaysUpdate) {
      setItemFocus();
    } else if (captureFocus) {
      const id = setTimeout(() => {
        const menuElt = menuRef.current;
        if (menuElt && !menuElt.contains(document.activeElement)) {
          focusRef.current.focus();
          setItemFocus();
        }
      }, openTransition ? 170 : 100);
      return () => clearTimeout(id);
    }
  }, [isOpen, openTransition, closeTransition, captureFocus, menuItemFocus, dispatch]);
  const itemContext = (0, import_react8.useMemo)(() => ({
    isParentOpen: isOpen,
    submenuCtx,
    dispatch,
    updateItems
  }), [isOpen, submenuCtx, dispatch, updateItems]);
  let maxHeight, overflowAmt;
  if (overflowData) {
    setDownOverflow ? overflowAmt = overflowData.overflowAmt : maxHeight = overflowData.height;
  }
  const listContext = (0, import_react8.useMemo)(() => ({
    reposSubmenu,
    submenuCtx,
    overflow,
    overflowAmt,
    parentMenuRef: menuRef,
    parentDir: expandedDirection
  }), [reposSubmenu, submenuCtx, overflow, overflowAmt, expandedDirection]);
  const overflowStyle = maxHeight >= 0 ? {
    maxHeight,
    overflow
  } : void 0;
  const modifiers = (0, import_react8.useMemo)(() => ({
    state,
    dir: expandedDirection
  }), [state, expandedDirection]);
  const arrowModifiers = (0, import_react8.useMemo)(() => ({
    dir: expandedDirection
  }), [expandedDirection]);
  const _arrowClassName = useBEM({
    block: menuClass,
    element: menuArrowClass,
    modifiers: arrowModifiers,
    className: arrowProps.className
  });
  const menu = (0, import_jsx_runtime3.jsxs)("ul", {
    role: "menu",
    "aria-label": ariaLabel,
    ...commonProps(isDisabled),
    ...mergeProps({
      onPointerEnter: parentSubmenuCtx == null ? void 0 : parentSubmenuCtx.off,
      onPointerMove,
      onPointerLeave,
      onKeyDown,
      onAnimationEnd
    }, restProps),
    ref: useCombinedRef(externalRef, menuRef),
    className: useBEM({
      block: menuClass,
      modifiers,
      className: menuClassName
    }),
    style: {
      ...menuStyle,
      ...overflowStyle,
      margin: 0,
      display: state === "closed" ? "none" : void 0,
      position: positionAbsolute,
      left: menuPosition.x,
      top: menuPosition.y
    },
    children: [(0, import_jsx_runtime3.jsx)("li", {
      tabIndex: -1,
      style: {
        position: positionAbsolute,
        left: 0,
        top: 0,
        display: "block",
        outline: "none"
      },
      ref: focusRef,
      ...dummyItemProps,
      ...focusProps
    }), arrow && (0, import_jsx_runtime3.jsx)("li", {
      ...dummyItemProps,
      ...arrowProps,
      className: _arrowClassName,
      style: {
        display: "block",
        position: positionAbsolute,
        left: arrowPosition.x,
        top: arrowPosition.y,
        ...arrowProps.style
      },
      ref: arrowRef
    }), (0, import_jsx_runtime3.jsx)(MenuListContext.Provider, {
      value: listContext,
      children: (0, import_jsx_runtime3.jsx)(MenuListItemContext.Provider, {
        value: itemContext,
        children: (0, import_jsx_runtime3.jsx)(HoverItemContext.Provider, {
          value: hoverItem,
          children: safeCall(children, modifiers)
        })
      })
    })]
  });
  return containerProps ? (0, import_jsx_runtime3.jsx)(MenuContainer, {
    ...containerProps,
    isOpen,
    children: menu
  }) : menu;
};

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/ControlledMenu.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var ControlledMenu = (0, import_react9.forwardRef)(function ControlledMenu2({
  "aria-label": ariaLabel,
  className,
  containerProps,
  initialMounted,
  unmountOnClose,
  transition,
  transitionTimeout,
  boundingBoxRef,
  boundingBoxPadding,
  reposition = "auto",
  submenuOpenDelay = 300,
  submenuCloseDelay = 150,
  viewScroll = "initial",
  portal,
  theming,
  onItemClick,
  ...restProps
}, externalRef) {
  const containerRef = (0, import_react9.useRef)(null);
  const scrollNodesRef = (0, import_react9.useRef)({});
  const {
    anchorRef,
    state,
    onClose
  } = restProps;
  const settings = (0, import_react9.useMemo)(() => ({
    initialMounted,
    unmountOnClose,
    transition,
    transitionTimeout,
    boundingBoxRef,
    boundingBoxPadding,
    rootMenuRef: containerRef,
    rootAnchorRef: anchorRef,
    scrollNodesRef,
    reposition,
    viewScroll,
    submenuOpenDelay,
    submenuCloseDelay
  }), [initialMounted, unmountOnClose, transition, transitionTimeout, anchorRef, boundingBoxRef, boundingBoxPadding, reposition, viewScroll, submenuOpenDelay, submenuCloseDelay]);
  const eventHandlers = (0, import_react9.useMemo)(() => ({
    handleClick(event, isCheckorRadio) {
      if (!event.stopPropagation)
        safeCall(onItemClick, event);
      let keepOpen = event.keepOpen;
      if (keepOpen === void 0) {
        keepOpen = isCheckorRadio && event.key === Keys.SPACE;
      }
      if (!keepOpen) {
        safeCall(onClose, {
          value: event.value,
          key: event.key,
          reason: CloseReason.CLICK
        });
      }
    },
    handleClose(key) {
      safeCall(onClose, {
        key,
        reason: CloseReason.CLICK
      });
    }
  }), [onItemClick, onClose]);
  if (!state)
    return null;
  const menuList = (0, import_jsx_runtime4.jsx)(SettingsContext.Provider, {
    value: settings,
    children: (0, import_jsx_runtime4.jsx)(EventHandlersContext.Provider, {
      value: eventHandlers,
      children: (0, import_jsx_runtime4.jsx)(MenuList, {
        ...restProps,
        ariaLabel: ariaLabel || "Menu",
        externalRef,
        containerRef,
        containerProps: {
          className,
          containerRef,
          containerProps,
          theming,
          transition,
          onClose
        }
      })
    })
  });
  if (portal === true && typeof document !== "undefined") {
    return (0, import_react_dom3.createPortal)(menuList, document.body);
  } else if (portal) {
    return portal.target ? (0, import_react_dom3.createPortal)(menuList, portal.target) : portal.stablePosition ? null : menuList;
  }
  return menuList;
});
true ? ControlledMenu.propTypes = {
  ...rootMenuPropTypes,
  state: (0, import_prop_types3.oneOf)(values(MenuStateMap)),
  anchorPoint: (0, import_prop_types3.exact)({
    x: import_prop_types3.number,
    y: import_prop_types3.number
  }),
  anchorRef: import_prop_types3.object,
  captureFocus: import_prop_types3.bool,
  menuItemFocus: (0, import_prop_types3.exact)({
    position: (0, import_prop_types3.oneOfType)([import_prop_types3.string, import_prop_types3.number]),
    alwaysUpdate: import_prop_types3.bool
  }),
  onClose: import_prop_types3.func
} : void 0;

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/Menu.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/hooks/useMenuStateAndFocus.js
var import_react12 = __toESM(require_react());

// ../.yarn/__virtual__/react-transition-state-virtual-00e2e35b56/0/cache/react-transition-state-npm-2.1.1-02fff96397-992f6a4407.zip/node_modules/react-transition-state/dist/es/hooks/useTransition.js
var import_react10 = __toESM(require_react());

// ../.yarn/__virtual__/react-transition-state-virtual-00e2e35b56/0/cache/react-transition-state-npm-2.1.1-02fff96397-992f6a4407.zip/node_modules/react-transition-state/dist/es/hooks/utils.js
var PRE_ENTER = 0;
var ENTERING = 1;
var ENTERED = 2;
var PRE_EXIT = 3;
var EXITING = 4;
var EXITED = 5;
var UNMOUNTED = 6;
var STATUS = ["preEnter", "entering", "entered", "preExit", "exiting", "exited", "unmounted"];
var getState = (status) => ({
  _s: status,
  status: STATUS[status],
  isEnter: status < PRE_EXIT,
  isMounted: status !== UNMOUNTED,
  isResolved: status === ENTERED || status > EXITING
});
var startOrEnd = (unmounted) => unmounted ? UNMOUNTED : EXITED;
var getEndStatus = (status, unmountOnExit) => {
  switch (status) {
    case ENTERING:
    case PRE_ENTER:
      return ENTERED;
    case EXITING:
    case PRE_EXIT:
      return startOrEnd(unmountOnExit);
  }
};
var getTimeout = (timeout) => typeof timeout === "object" ? [timeout.enter, timeout.exit] : [timeout, timeout];
var nextTick = (transitState, status) => setTimeout(() => {
  isNaN(document.body.offsetTop) || transitState(status + 1);
}, 0);

// ../.yarn/__virtual__/react-transition-state-virtual-00e2e35b56/0/cache/react-transition-state-npm-2.1.1-02fff96397-992f6a4407.zip/node_modules/react-transition-state/dist/es/hooks/useTransition.js
var updateState = (status, setState, latestState, timeoutId, onChange) => {
  clearTimeout(timeoutId.current);
  const state = getState(status);
  setState(state);
  latestState.current = state;
  onChange && onChange({
    current: state
  });
};
var useTransition = ({
  enter = true,
  exit = true,
  preEnter,
  preExit,
  timeout,
  initialEntered,
  mountOnEnter,
  unmountOnExit,
  onStateChange: onChange
} = {}) => {
  const [state, setState] = (0, import_react10.useState)(() => getState(initialEntered ? ENTERED : startOrEnd(mountOnEnter)));
  const latestState = (0, import_react10.useRef)(state);
  const timeoutId = (0, import_react10.useRef)();
  const [enterTimeout, exitTimeout] = getTimeout(timeout);
  const endTransition = (0, import_react10.useCallback)(() => {
    const status = getEndStatus(latestState.current._s, unmountOnExit);
    status && updateState(status, setState, latestState, timeoutId, onChange);
  }, [onChange, unmountOnExit]);
  const toggle = (0, import_react10.useCallback)((toEnter) => {
    const transitState = (status) => {
      updateState(status, setState, latestState, timeoutId, onChange);
      switch (status) {
        case ENTERING:
          if (enterTimeout >= 0)
            timeoutId.current = setTimeout(endTransition, enterTimeout);
          break;
        case EXITING:
          if (exitTimeout >= 0)
            timeoutId.current = setTimeout(endTransition, exitTimeout);
          break;
        case PRE_ENTER:
        case PRE_EXIT:
          timeoutId.current = nextTick(transitState, status);
          break;
      }
    };
    const enterStage = latestState.current.isEnter;
    if (typeof toEnter !== "boolean")
      toEnter = !enterStage;
    if (toEnter) {
      !enterStage && transitState(enter ? preEnter ? PRE_ENTER : ENTERING : ENTERED);
    } else {
      enterStage && transitState(exit ? preExit ? PRE_EXIT : EXITING : startOrEnd(unmountOnExit));
    }
  }, [endTransition, onChange, enter, exit, preEnter, preExit, enterTimeout, exitTimeout, unmountOnExit]);
  (0, import_react10.useEffect)(() => () => clearTimeout(timeoutId.current), []);
  return [state, toggle, endTransition];
};

// ../.yarn/__virtual__/react-transition-state-virtual-00e2e35b56/0/cache/react-transition-state-npm-2.1.1-02fff96397-992f6a4407.zip/node_modules/react-transition-state/dist/es/hooks/useTransitionMap.js
var import_react11 = __toESM(require_react());

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/hooks/useMenuState.js
var useMenuState = ({
  initialOpen,
  initialMounted,
  unmountOnClose,
  transition,
  transitionTimeout = 500
} = {}) => {
  const [{
    status
  }, toggleMenu, endTransition] = useTransition({
    initialEntered: initialOpen,
    mountOnEnter: !initialMounted,
    unmountOnExit: unmountOnClose,
    timeout: transitionTimeout,
    enter: getTransition(transition, "open"),
    exit: getTransition(transition, "close")
  });
  return [{
    state: MenuStateMap[status],
    endTransition
  }, toggleMenu];
};

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/hooks/useMenuStateAndFocus.js
var useMenuStateAndFocus = (options) => {
  const [menuProps, toggleMenu] = useMenuState(options);
  const [menuItemFocus, setMenuItemFocus] = (0, import_react12.useState)();
  const openMenu = (position, alwaysUpdate) => {
    setMenuItemFocus({
      position,
      alwaysUpdate
    });
    toggleMenu(true);
  };
  return [{
    menuItemFocus,
    ...menuProps
  }, toggleMenu, openMenu];
};

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/hooks/useClick.js
var import_react13 = __toESM(require_react());
var useClick = (state, onToggle) => {
  if (typeof onToggle !== "function") {
    throw new Error("[React-Menu] useClick/useHover requires a function in the second parameter.");
  }
  const [skipOpen] = (0, import_react13.useState)({});
  return {
    onMouseDown: () => {
      skipOpen.v = state && state !== "closed";
    },
    onClick: (e) => skipOpen.v ? skipOpen.v = false : onToggle(true, e)
  };
};

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/hooks/useMenuChange.js
var import_react14 = __toESM(require_react());
var useMenuChange = (onMenuChange, isOpen) => {
  const prevOpen = (0, import_react14.useRef)(isOpen);
  (0, import_react14.useEffect)(() => {
    if (prevOpen.current !== isOpen)
      safeCall(onMenuChange, {
        open: isOpen
      });
    prevOpen.current = isOpen;
  }, [onMenuChange, isOpen]);
};

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/Menu.js
var Menu = (0, import_react15.forwardRef)(function Menu2({
  "aria-label": ariaLabel,
  captureFocus: _,
  initialOpen: _1,
  menuButton,
  instanceRef,
  onMenuChange,
  ...restProps
}, externalRef) {
  const [stateProps, toggleMenu, openMenu] = useMenuStateAndFocus(restProps);
  const {
    state
  } = stateProps;
  const isOpen = isMenuOpen(state);
  const buttonRef = (0, import_react15.useRef)(null);
  const anchorProps = useClick(state, (_2, e) => openMenu(!e.detail ? FocusPositions.FIRST : void 0));
  const handleClose = (0, import_react15.useCallback)((e) => {
    toggleMenu(false);
    if (e.key)
      buttonRef.current.focus();
  }, [toggleMenu]);
  const onKeyDown = (e) => {
    switch (e.key) {
      case Keys.UP:
        openMenu(FocusPositions.LAST);
        break;
      case Keys.DOWN:
        openMenu(FocusPositions.FIRST);
        break;
      default:
        return;
    }
    e.preventDefault();
  };
  const button = safeCall(menuButton, {
    open: isOpen
  });
  if (!button || !button.type)
    throw new Error("Menu requires a menuButton prop.");
  const buttonProps = {
    ref: useCombinedRef(button.ref, buttonRef),
    ...mergeProps({
      onKeyDown,
      ...anchorProps
    }, button.props)
  };
  if (getName(button.type) === "MenuButton") {
    buttonProps.isOpen = isOpen;
  }
  const renderButton = (0, import_react15.cloneElement)(button, buttonProps);
  useMenuChange(onMenuChange, isOpen);
  (0, import_react15.useImperativeHandle)(instanceRef, () => ({
    openMenu,
    closeMenu: () => toggleMenu(false)
  }));
  return (0, import_jsx_runtime5.jsxs)(import_react15.Fragment, {
    children: [renderButton, (0, import_jsx_runtime5.jsx)(ControlledMenu, {
      ...restProps,
      ...stateProps,
      "aria-label": ariaLabel || (typeof button.props.children === "string" ? button.props.children : "Menu"),
      anchorRef: buttonRef,
      ref: externalRef,
      onClose: handleClose
    })]
  });
});
true ? Menu.propTypes = {
  ...rootMenuPropTypes,
  ...uncontrolledMenuPropTypes,
  menuButton: (0, import_prop_types4.oneOfType)([import_prop_types4.element, import_prop_types4.func]).isRequired
} : void 0;

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/SubMenu.js
var import_react17 = __toESM(require_react());
var import_react_dom4 = __toESM(require_react_dom());
var import_prop_types5 = __toESM(require_prop_types());
var import_jsx_runtime7 = __toESM(require_jsx_runtime());

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/utils/withHovering.js
var import_react16 = __toESM(require_react());
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var withHovering = (name, WrappedComponent) => {
  const Component = (0, import_react16.memo)(WrappedComponent);
  const WithHovering = (0, import_react16.forwardRef)((props, ref) => {
    const itemRef = (0, import_react16.useRef)(null);
    return (0, import_jsx_runtime6.jsx)(Component, {
      ...props,
      itemRef,
      externalRef: ref,
      isHovering: (0, import_react16.useContext)(HoverItemContext) === itemRef.current
    });
  });
  WithHovering.displayName = `WithHovering(${name})`;
  return WithHovering;
};

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/hooks/useItemEffect.js
var useItemEffect = (isDisabled, itemRef, updateItems) => {
  useIsomorphicLayoutEffect(() => {
    if (!updateItems) {
      throw new Error(`[React-Menu] This menu item or submenu should be rendered under a menu: ${itemRef.current.outerHTML}`);
    }
    if (isDisabled)
      return;
    const item = itemRef.current;
    updateItems(item, true);
    return () => {
      updateItems(item);
    };
  }, [isDisabled, itemRef, updateItems]);
};

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/SubMenu.js
var SubMenu = withHovering("SubMenu", function SubMenu2({
  "aria-label": ariaLabel,
  className,
  disabled,
  direction,
  label,
  openTrigger,
  onMenuChange,
  isHovering,
  instanceRef,
  itemRef,
  captureFocus: _1,
  repositionFlag: _2,
  itemProps = {},
  ...restProps
}) {
  const settings = (0, import_react17.useContext)(SettingsContext);
  const {
    rootMenuRef,
    submenuOpenDelay,
    submenuCloseDelay
  } = settings;
  const {
    parentMenuRef,
    parentDir,
    overflow: parentOverflow
  } = (0, import_react17.useContext)(MenuListContext);
  const {
    isParentOpen,
    submenuCtx,
    dispatch,
    updateItems
  } = (0, import_react17.useContext)(MenuListItemContext);
  const isPortal = parentOverflow !== "visible";
  const [stateProps, toggleMenu, _openMenu] = useMenuStateAndFocus(settings);
  const {
    state
  } = stateProps;
  const isDisabled = !!disabled;
  const isOpen = isMenuOpen(state);
  const containerRef = (0, import_react17.useRef)(null);
  const [timerId] = (0, import_react17.useState)({
    v: 0
  });
  const stopTimer = () => {
    submenuCtx.off();
    if (timerId.v) {
      clearTimeout(timerId.v);
      timerId.v = 0;
    }
  };
  const openMenu = (...args) => {
    stopTimer();
    setHover();
    !isDisabled && _openMenu(...args);
  };
  const setHover = () => !isHovering && !isDisabled && dispatch(HoverActionTypes.SET, itemRef.current);
  const delayOpen = (delay) => {
    setHover();
    if (!openTrigger)
      timerId.v = setTimeout(() => batchedUpdates(openMenu), Math.max(delay, 0));
  };
  const onPointerMove = (e) => {
    if (isDisabled)
      return;
    e.stopPropagation();
    if (timerId.v || isOpen)
      return;
    submenuCtx.on(submenuCloseDelay, () => delayOpen(submenuOpenDelay - submenuCloseDelay), () => delayOpen(submenuOpenDelay));
  };
  const onPointerLeave = () => {
    stopTimer();
    if (!isOpen)
      dispatch(HoverActionTypes.UNSET, itemRef.current);
  };
  const onKeyDown = (e) => {
    if (!isHovering)
      return;
    switch (e.key) {
      case Keys.ENTER:
        e.preventDefault();
      case Keys.SPACE:
      case Keys.RIGHT:
        openTrigger !== "none" && openMenu(FocusPositions.FIRST);
    }
  };
  const onKeyDownOfRoot = (e) => {
    let handled = false;
    switch (e.key) {
      case Keys.LEFT:
        if (isOpen) {
          itemRef.current.focus();
          toggleMenu(false);
          handled = true;
        }
        break;
      case Keys.RIGHT:
        if (!isOpen)
          handled = true;
        break;
    }
    if (handled) {
      e.preventDefault();
      e.stopPropagation();
    }
  };
  useItemEffect(isDisabled, itemRef, updateItems);
  useMenuChange(onMenuChange, isOpen);
  (0, import_react17.useEffect)(() => submenuCtx.toggle(isOpen), [submenuCtx, isOpen]);
  (0, import_react17.useEffect)(() => () => clearTimeout(timerId.v), [timerId]);
  (0, import_react17.useEffect)(() => {
    if (isHovering && isParentOpen) {
      itemRef.current.focus();
    } else {
      toggleMenu(false);
    }
  }, [isHovering, isParentOpen, toggleMenu, itemRef]);
  (0, import_react17.useImperativeHandle)(instanceRef, () => ({
    openMenu: (...args) => {
      isParentOpen && openMenu(...args);
    },
    closeMenu: () => {
      if (isOpen) {
        itemRef.current.focus();
        toggleMenu(false);
      }
    }
  }));
  const modifiers = (0, import_react17.useMemo)(() => ({
    open: isOpen,
    hover: isHovering,
    disabled: isDisabled,
    submenu: true
  }), [isOpen, isHovering, isDisabled]);
  const {
    ref: externalItemRef,
    className: itemClassName,
    ...restItemProps
  } = itemProps;
  const mergedItemProps = mergeProps({
    onPointerEnter: submenuCtx.off,
    onPointerMove,
    onPointerLeave,
    onKeyDown,
    onClick: () => openTrigger !== "none" && openMenu()
  }, restItemProps);
  const getMenuList = () => {
    const menuList = (0, import_jsx_runtime7.jsx)(MenuList, {
      ...restProps,
      ...stateProps,
      ariaLabel: ariaLabel || (typeof label === "string" ? label : "Submenu"),
      anchorRef: itemRef,
      containerRef: isPortal ? rootMenuRef : containerRef,
      direction: direction || (parentDir === "right" || parentDir === "left" ? parentDir : "right"),
      parentScrollingRef: isPortal && parentMenuRef,
      isDisabled
    });
    const container = rootMenuRef.current;
    return isPortal && container ? (0, import_react_dom4.createPortal)(menuList, container) : menuList;
  };
  return (0, import_jsx_runtime7.jsxs)("li", {
    className: useBEM({
      block: menuClass,
      element: subMenuClass,
      className
    }),
    style: {
      position: "relative"
    },
    role: roleNone,
    ref: containerRef,
    onKeyDown: onKeyDownOfRoot,
    children: [(0, import_jsx_runtime7.jsx)("div", {
      role: roleMenuitem,
      "aria-haspopup": true,
      "aria-expanded": isOpen,
      ...commonProps(isDisabled, isHovering),
      ...mergedItemProps,
      ref: useCombinedRef(externalItemRef, itemRef),
      className: useBEM({
        block: menuClass,
        element: menuItemClass,
        modifiers,
        className: itemClassName
      }),
      children: (0, import_react17.useMemo)(() => safeCall(label, modifiers), [label, modifiers])
    }), state && getMenuList()]
  });
});
true ? SubMenu.propTypes = {
  ...menuPropTypes,
  ...uncontrolledMenuPropTypes,
  disabled: import_prop_types5.bool,
  openTrigger: (0, import_prop_types5.oneOf)(["none", "clickOnly"]),
  label: (0, import_prop_types5.oneOfType)([import_prop_types5.node, import_prop_types5.func]),
  itemProps: (0, import_prop_types5.shape)({
    ...stylePropTypes()
  })
} : void 0;

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/MenuItem.js
var import_react19 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
var import_jsx_runtime8 = __toESM(require_jsx_runtime());

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/hooks/useItemState.js
var import_react18 = __toESM(require_react());
var useItemState = (itemRef, focusRef, isHovering, isDisabled) => {
  const {
    submenuCloseDelay
  } = (0, import_react18.useContext)(SettingsContext);
  const {
    isParentOpen,
    submenuCtx,
    dispatch,
    updateItems
  } = (0, import_react18.useContext)(MenuListItemContext);
  const setHover = () => {
    !isHovering && !isDisabled && dispatch(HoverActionTypes.SET, itemRef.current);
  };
  const unsetHover = () => {
    !isDisabled && dispatch(HoverActionTypes.UNSET, itemRef.current);
  };
  const onBlur = (e) => {
    if (isHovering && !e.currentTarget.contains(e.relatedTarget))
      unsetHover();
  };
  const onPointerMove = (e) => {
    if (!isDisabled) {
      e.stopPropagation();
      submenuCtx.on(submenuCloseDelay, setHover, setHover);
    }
  };
  const onPointerLeave = (_, keepHover) => {
    submenuCtx.off();
    !keepHover && unsetHover();
  };
  useItemEffect(isDisabled, itemRef, updateItems);
  (0, import_react18.useEffect)(() => {
    if (isHovering && isParentOpen) {
      focusRef.current && focusRef.current.focus();
    }
  }, [focusRef, isHovering, isParentOpen]);
  return {
    setHover,
    onBlur,
    onPointerMove,
    onPointerLeave
  };
};

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/MenuItem.js
var MenuItem = withHovering("MenuItem", function MenuItem2({
  className,
  value,
  href,
  type,
  checked,
  disabled,
  children,
  onClick,
  isHovering,
  itemRef,
  externalRef,
  ...restProps
}) {
  const isDisabled = !!disabled;
  const {
    setHover,
    ...restStateProps
  } = useItemState(itemRef, itemRef, isHovering, isDisabled);
  const eventHandlers = (0, import_react19.useContext)(EventHandlersContext);
  const radioGroup = (0, import_react19.useContext)(RadioGroupContext);
  const isRadio = type === "radio";
  const isCheckBox = type === "checkbox";
  const isAnchor = !!href && !isDisabled && !isRadio && !isCheckBox;
  const isChecked = isRadio ? radioGroup.value === value : isCheckBox ? !!checked : false;
  const handleClick = (e) => {
    if (isDisabled) {
      e.stopPropagation();
      e.preventDefault();
      return;
    }
    const event = {
      value,
      syntheticEvent: e
    };
    if (e.key !== void 0)
      event.key = e.key;
    if (isCheckBox)
      event.checked = !isChecked;
    if (isRadio)
      event.name = radioGroup.name;
    safeCall(onClick, event);
    if (isRadio)
      safeCall(radioGroup.onRadioChange, event);
    eventHandlers.handleClick(event, isCheckBox || isRadio);
  };
  const handleKeyDown = (e) => {
    if (!isHovering)
      return;
    switch (e.key) {
      case Keys.ENTER:
        e.preventDefault();
      case Keys.SPACE:
        isAnchor ? itemRef.current.click() : handleClick(e);
    }
  };
  const modifiers = (0, import_react19.useMemo)(() => ({
    type,
    disabled: isDisabled,
    hover: isHovering,
    checked: isChecked,
    anchor: isAnchor
  }), [type, isDisabled, isHovering, isChecked, isAnchor]);
  const mergedProps = mergeProps({
    ...restStateProps,
    onPointerDown: setHover,
    onKeyDown: handleKeyDown,
    onClick: handleClick
  }, restProps);
  const menuItemProps = {
    role: isRadio ? "menuitemradio" : isCheckBox ? "menuitemcheckbox" : roleMenuitem,
    "aria-checked": isRadio || isCheckBox ? isChecked : void 0,
    ...commonProps(isDisabled, isHovering),
    ...mergedProps,
    ref: useCombinedRef(externalRef, itemRef),
    className: useBEM({
      block: menuClass,
      element: menuItemClass,
      modifiers,
      className
    }),
    children: (0, import_react19.useMemo)(() => safeCall(children, modifiers), [children, modifiers])
  };
  return isAnchor ? (0, import_jsx_runtime8.jsx)("li", {
    role: roleNone,
    children: (0, import_jsx_runtime8.jsx)("a", {
      href,
      ...menuItemProps
    })
  }) : (0, import_jsx_runtime8.jsx)("li", {
    ...menuItemProps
  });
});
true ? MenuItem.propTypes = {
  ...stylePropTypes(),
  value: import_prop_types6.any,
  href: import_prop_types6.string,
  type: (0, import_prop_types6.oneOf)(["checkbox", "radio"]),
  checked: import_prop_types6.bool,
  disabled: import_prop_types6.bool,
  children: (0, import_prop_types6.oneOfType)([import_prop_types6.node, import_prop_types6.func]),
  onClick: import_prop_types6.func
} : void 0;

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/FocusableItem.js
var import_react20 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var FocusableItem = withHovering("FocusableItem", function FocusableItem2({
  className,
  disabled,
  children,
  isHovering,
  itemRef,
  externalRef,
  ...restProps
}) {
  const isDisabled = !!disabled;
  const ref = (0, import_react20.useRef)(null);
  const {
    setHover,
    onPointerLeave,
    ...restStateProps
  } = useItemState(itemRef, ref, isHovering, isDisabled);
  const {
    handleClose
  } = (0, import_react20.useContext)(EventHandlersContext);
  const modifiers = (0, import_react20.useMemo)(() => ({
    disabled: isDisabled,
    hover: isHovering,
    focusable: true
  }), [isDisabled, isHovering]);
  const renderChildren = (0, import_react20.useMemo)(() => safeCall(children, {
    ...modifiers,
    ref,
    closeMenu: handleClose
  }), [children, modifiers, handleClose]);
  const mergedProps = mergeProps({
    ...restStateProps,
    onPointerLeave: (e) => onPointerLeave(e, true),
    onFocus: setHover
  }, restProps);
  return (0, import_jsx_runtime9.jsx)("li", {
    role: roleMenuitem,
    ...commonProps(isDisabled),
    ...mergedProps,
    ref: useCombinedRef(externalRef, itemRef),
    className: useBEM({
      block: menuClass,
      element: menuItemClass,
      modifiers,
      className
    }),
    children: renderChildren
  });
});
true ? FocusableItem.propTypes = {
  ...stylePropTypes(),
  disabled: import_prop_types7.bool,
  children: import_prop_types7.func
} : void 0;

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/MenuDivider.js
var import_react21 = __toESM(require_react());
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var MenuDivider = (0, import_react21.memo)((0, import_react21.forwardRef)(function MenuDivider2({
  className,
  ...restProps
}, externalRef) {
  return (0, import_jsx_runtime10.jsx)("li", {
    role: "separator",
    ...restProps,
    ref: externalRef,
    className: useBEM({
      block: menuClass,
      element: menuDividerClass,
      className
    })
  });
}));
true ? MenuDivider.propTypes = {
  ...stylePropTypes()
} : void 0;

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/MenuHeader.js
var import_react22 = __toESM(require_react());
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var MenuHeader = (0, import_react22.memo)((0, import_react22.forwardRef)(function MenuHeader2({
  className,
  ...restProps
}, externalRef) {
  return (0, import_jsx_runtime11.jsx)("li", {
    role: roleNone,
    ...restProps,
    ref: externalRef,
    className: useBEM({
      block: menuClass,
      element: menuHeaderClass,
      className
    })
  });
}));
true ? MenuHeader.propTypes = {
  ...stylePropTypes()
} : void 0;

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/MenuGroup.js
var import_react23 = __toESM(require_react());
var import_prop_types8 = __toESM(require_prop_types());
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var MenuGroup = (0, import_react23.forwardRef)(function MenuGroup2({
  className,
  style,
  takeOverflow,
  ...restProps
}, externalRef) {
  const ref = (0, import_react23.useRef)(null);
  const [overflowStyle, setOverflowStyle] = (0, import_react23.useState)();
  const {
    overflow,
    overflowAmt
  } = (0, import_react23.useContext)(MenuListContext);
  useIsomorphicLayoutEffect(() => {
    let maxHeight;
    if (takeOverflow && overflowAmt >= 0) {
      maxHeight = ref.current.getBoundingClientRect().height - overflowAmt;
      if (maxHeight < 0)
        maxHeight = 0;
    }
    setOverflowStyle(maxHeight >= 0 ? {
      maxHeight,
      overflow
    } : void 0);
  }, [takeOverflow, overflow, overflowAmt]);
  useIsomorphicLayoutEffect(() => {
    if (overflowStyle)
      ref.current.scrollTop = 0;
  }, [overflowStyle]);
  return (0, import_jsx_runtime12.jsx)("div", {
    ...restProps,
    ref: useCombinedRef(externalRef, ref),
    className: useBEM({
      block: menuClass,
      element: menuGroupClass,
      className
    }),
    style: {
      ...style,
      ...overflowStyle
    }
  });
});
true ? MenuGroup.propTypes = {
  ...stylePropTypes(),
  takeOverflow: import_prop_types8.bool
} : void 0;

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/components/MenuRadioGroup.js
var import_react24 = __toESM(require_react());
var import_prop_types9 = __toESM(require_prop_types());
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var MenuRadioGroup = (0, import_react24.forwardRef)(function MenuRadioGroup2({
  "aria-label": ariaLabel,
  className,
  name,
  value,
  onRadioChange,
  ...restProps
}, externalRef) {
  const contextValue = (0, import_react24.useMemo)(() => ({
    name,
    value,
    onRadioChange
  }), [name, value, onRadioChange]);
  return (0, import_jsx_runtime13.jsx)(RadioGroupContext.Provider, {
    value: contextValue,
    children: (0, import_jsx_runtime13.jsx)("li", {
      role: roleNone,
      children: (0, import_jsx_runtime13.jsx)("ul", {
        role: "group",
        "aria-label": ariaLabel || name || "Radio group",
        ...restProps,
        ref: externalRef,
        className: useBEM({
          block: menuClass,
          element: radioGroupClass,
          className
        })
      })
    })
  });
});
true ? MenuRadioGroup.propTypes = {
  ...stylePropTypes(),
  name: import_prop_types9.string,
  value: import_prop_types9.any,
  onRadioChange: import_prop_types9.func
} : void 0;

// ../.yarn/__virtual__/@szhsin-react-menu-virtual-c5c94c8fd2/0/cache/@szhsin-react-menu-npm-4.1.0-29e5c8a3a0-34974d9f66.zip/node_modules/@szhsin/react-menu/dist/es/hooks/useHover.js
var import_react25 = __toESM(require_react());
var useHover = (isOpen, onToggle, {
  openDelay = 100,
  closeDelay = 300
} = {}) => {
  const [config] = (0, import_react25.useState)({});
  const clearTimer = () => clearTimeout(config.t);
  const delayAction = (toOpen) => (e) => {
    clearTimer();
    config.t = setTimeout(() => onToggle(toOpen, e), toOpen ? openDelay : closeDelay);
  };
  const props = {
    onMouseEnter: delayAction(true),
    onMouseLeave: delayAction(false)
  };
  return {
    anchorProps: {
      ...props,
      ...useClick(isOpen, onToggle)
    },
    hoverProps: {
      ...props,
      onMouseEnter: clearTimer
    }
  };
};
export {
  ControlledMenu,
  FocusableItem,
  Menu,
  MenuButton,
  MenuDivider,
  MenuGroup,
  MenuHeader,
  MenuItem,
  MenuRadioGroup,
  SubMenu,
  useClick,
  useHover,
  useMenuState
};
//# sourceMappingURL=@szhsin_react-menu.js.map
