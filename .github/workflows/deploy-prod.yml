name: Deploy Production

concurrency:
  group: deploy-prod

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to deploy (e.g. v1.0.0)"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ vars.WEBSITE_URL }}
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - name: Download release build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir release
          gh release download ${{ github.ref_name }} -A=zip -D release
          gh release download ${{ github.ref_name }} -D release
          cd release
          unzip -q tsconline-*.zip
          rm tsconline-*.zip
          mv tsconline-*/* .
          rm -r tsconline-*
          touch secrets.env

      - name: Verify release build
        id: verify_release
        run: |
          cd release
          if [ ! -f "build-artifacts.zip"  ] || [ ! -f "datapacks.zip" ]; then
            echo "Error: build-artifacts.zip or datapacks.zip not found"
            exit 1
          fi
          jar_name=$(jq -r '.activeJar' server/assets/config.json | xargs basename)
          if [ -z "$jar_name" ]; then
            echo "Error: Failed to parse jar name from config.json"
            exit 1
          fi
          if [ ! -f "$jar_name" ]; then
            echo "Error: $jar_name not found"
            exit 1
          fi
          decryption_jar_name=$(jq -r '.decryptionJar' server/assets/config.json | xargs basename)
          if [ -z "$decryption_jar_name" ]; then
            echo "Error: Failed to parse decryption jar name from config.json"
            exit 1
          fi
          if [ ! -f "$decryption_jar_name" ]; then
            echo "Error: $decryption_jar_name not found"
            exit 1
          fi
          cd release
          zip -r -q ../release-artifacts.zip *
          echo "decryption_jar_name=$decryption_jar_name" >> $GITHUB_OUTPUT
          echo "jar_name=$jar_name" >> $GITHUB_OUTPUT

      - name: Send Artifacts to Server
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key.pem
          chmod 600 /tmp/ssh_key.pem
          scp -o StrictHostKeyChecking=no -i /tmp/ssh_key.pem release-artifacts.zip ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ secrets.RELEASE_PATH }}

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            rsync -a --delete --exclude="release-artifacts.zip" --exclude=".yarn" --exclude=".yarn/*" --exclude="server/assets/*" /dev/null ${{ secrets.RELEASE_PATH }}/
            cd ${{ secrets.RELEASE_PATH }}

            git fetch --tags
            git checkout ${{ inputs.tag }}

            unzip -q release-artifacts.zip -d ${{ secrets.RELEASE_PATH }}
            rm release-artifacts.zip
            unzip -q build-artifacts.zip -d ${{ secrets.RELEASE_PATH }}
            rm build-artifacts.zip
            mkdir -p ${{ secrets.RELEASE_PATH }}/server/assets/jars
            mv ${{ steps.verify_release.outputs.decryption_jar_name }} ${{ secrets.RELEASE_PATH }}/server/assets/jars
            mv ${{ steps.verify_release.outputs.jar_name }} ${{ secrets.RELEASE_PATH }}/server/assets/jars

            echo 'EMAIL_USER="${{ secrets.EMAIL_USER }}"' > ./server/.env
            echo 'EMAIL_PASS="${{ secrets.EMAIL_PASS }}"' >> ./server/.env
            echo 'SESSION_KEY="${{ secrets.SESSION_KEY }}"' >> ./server/.env
            echo 'NODE_ENV="production"' >> ./server/.env
            echo 'RECAPTCHA_SECRET_KEY="${{ secrets.RECAPTCHA_SECRET_KEY }}"' >> ./server/.env
            echo 'APP_URL="${{ vars.WEBSITE_URL }}"' >> ./server/.env
            echo 'ADMIN_USER="${{ secrets.ADMIN_USER }}"' >> ./server/.env
            echo 'ADMIN_PASS="${{ secrets.ADMIN_PASS }}"' >> ./server/.env
            echo 'ADMIN_EMAIL="${{ secrets.ADMIN_EMAIL }}"' >> ./server/.env
            echo 'DOMAIN="tsconline.timescalecreator.org"' >> ./server/.env

            echo 'VITE_APP_URL=${{ vars.WEBSITE_URL }}' > ./app/.env
            echo 'VITE_SERVER_URL=${{ vars.WEBSITE_URL }}' >> ./app/.env

            if [ ! -f "docker-compose-server.yml" ]; then
              echo "Error: docker-compose-server.yml not found"
              exit 1
            fi

            CONTAINER_ID=$(docker ps --filter "name=tsconline" --format "{{.ID}}")
            if [ -z "$CONTAINER_ID" ]; then
              echo "Container is not running. Bringing up the container..."
              docker-compose -f docker-compose-server.yml up -d
              if [ $? -ne 0 ]; then
                echo "Error: Failed to bring up the container."
                exit 1
              fi
            else
              echo "Container is already running. Restarting..."
              docker-compose -f docker-compose-server.yml restart
            fi

            START_TIME=$(date +"%Y-%m-%dT%H:%M:%SZ")

            sleep 5

            CONTAINER_ID=$(docker ps --filter "name=tsconline" --format "{{.ID}}")
            if [ -z "$CONTAINER_ID" ]; then
              echo "Error: Failed to get container ID for tsconline."
              exit 1
            fi

            MAX_WAIT=240
            INTERVAL=5
            ELAPSED=0

            while ! docker logs --since "$START_TIME" "$CONTAINER_ID" 2>&1 | grep -q "Server listening on  { address: '0.0.0.0', family: 'IPv4', port: 3000 }"; do
              if [ $ELAPSED -ge $MAX_WAIT ]; then
                echo "Max wait time exceeded. Exiting..."
                echo "Last 200 lines in container:"
                docker-compose -f docker-compose-server.yml logs --tail=200
                docker-compose -f docker-compose-server.yml down
                exit 1
              fi
              echo "Waiting for server to start... (elapsed: ${ELAPSED}s)"
              sleep $INTERVAL
              ELAPSED=$((ELAPSED + INTERVAL))
            done
