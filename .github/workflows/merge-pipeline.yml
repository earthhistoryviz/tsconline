name: Merge Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened] # Runs on opening a pr, pushing to a pr, and reopening a pr
    branches:
      - main

jobs:
  check-files:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch specific branch
        run: git fetch origin main:main

      - name: Check for disallowed files and directories
        id: check_files
        run: |
          if git diff --name-only main...HEAD | grep -E 'node_modules/'; then
            echo "node_modules folder detected, please remove" > disallowed_files.txt
          fi
          if git diff --name-only main...HEAD | grep -E 'uploads/'; then
            echo "uploads folder detected, please remove" >> disallowed_files.txt
          fi
          if git diff --name-only main...HEAD | grep 'file_metadata.json'; then
            echo "file_metadata.json detected, please remove" >> disallowed_files.txt
          fi   
          git diff --name-only main...HEAD | grep -E '\.(dpk|mdpk|txt|map|java|jar|DS_Store|db)$' |grep -v -E '^server/__tests__/__data__/(encryption-test-keys/.*|.*)\.(dpk|txt)$' >> disallowed_files.txt || true
          if git diff --name-only main...HEAD | grep -E 'app/dist/|server/dist/|shared/dist'; then
            echo "dist folder detected, please remove" >> disallowed_files.txt
          fi
          if git diff --name-only main...HEAD | grep -E '\.yarn/cache/'; then
            echo ".yarn/cache folder detected, please remove" >> disallowed_files.txt
          fi
          if git diff --name-only main...HEAD | grep -E '\.pnp\..*'; then
            echo ".pnp.* files detected, please remove" >> disallowed_files.txt
          fi
          if git diff --name-only main...HEAD | grep 'package-lock.json'; then
            echo "package-lock.json detected, please remove" >> disallowed_files.txt
          fi
          if [ -s disallowed_files.txt ]; then
            echo "disallowed_files_present=true" >> $GITHUB_OUTPUT
          fi

      - name: Comment PR on disallowed files Failure
        if: steps.check_files.outputs.disallowed_files_present == 'true'
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs');
            const disallowed_files_output = fs.readFileSync('disallowed_files.txt', 'utf8');
            const message = `ðŸš¨ There are files in your PR you need to remove:\n\n\`\`\`\n${disallowed_files_output}\n\`\`\`\n`;
            const prNumber = context.payload.pull_request.number;
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: prNumber,
              body: message,
            });
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for any failures
        if: steps.check_files.outputs.disallowed_files_present == 'true'
        run: exit 1

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Dependencies
        run: yarn install

      - name: Run ESLint
        id: eslint
        run: yarn lint-check > eslint-output.txt || echo "eslint_failed=true" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Comment PR on ESLint check failure
        if: steps.eslint.outputs.eslint_failed == 'true'
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs');
            const eslintOutput = fs.readFileSync('eslint-output.txt', 'utf8');
            const message = `ðŸš¨ The ESLint check has failed. Please address the following issues:\n\n\`\`\`\n${eslintOutput}\n\`\`\`\nRun 'yarn lint-format' locally to fix some of these issues automatically.`;
            const prNumber = context.payload.pull_request.number;
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: prNumber,
              body: message,
            });
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Prettify code
        id: prettier
        run: |
          if ! yarn prettier-check; then
            echo "prettify_failed=true" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Comment PR on Prettier check failure
        if: steps.prettier.outputs.prettify_failed == 'true'
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            ðŸš¨ The Prettier check has failed. Please run 'yarn prettier-format' locally and commit the changes.

      - name: Check for any failures
        if: steps.eslint.outputs.eslint_failed == 'true' || steps.prettier.outputs.prettify_failed == 'true'
        run: exit 1

  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Dependencies
        run: yarn install

      - name: Build with Vite
        id: vite_build
        run: |
          set -o pipefail
          if ! yarn build 2>&1 | tee build.log; then
            echo "build_failed=true" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Report Build Errors
        if: steps.vite_build.outputs.build_failed == 'true'
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs');
            const buildLog = fs.readFileSync('build.log', 'utf8');
            const prNumber = context.payload.pull_request?.number;
            if (prNumber) {
              const message = `ðŸš¨ The build has failed. Please check the build logs for more information.\n\n\`\`\`\n${buildLog}\n\`\`\``;
              github.rest.issues.createComment({
                ...context.repo,
                issue_number: prNumber,
                body: message,
              });
            }
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for any build failures
        if: steps.vite_build.outputs.build_failed == 'true'
        run: exit 1

      - name: Set up SSH key
        run: |
          eval $(ssh-agent)
          mkdir -p ~/.ssh
          echo "${{ secrets.JAVA_DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo -e "Host bitbucket.org\n\tAddKeysToAgent yes\n\tIdentityFile ~/.ssh/id_rsa" > ~/.ssh/config
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -H bitbucket.org >> ~/.ssh/known_hosts

      - name: Checkout code from Bitbucket
        run: |
          git clone git@bitbucket.org:strat/tscreator.git

      - name: set up jdk
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "8"
          java-package: "jdk"

      - name: set up make & zip
        run: |
          sudo apt install make
          sudo apt install zip

      - name: Build and compile TSCreator Jar for tests
        run: |
          cd /home/runner/work/tsconline/tsconline/tscreator/devel
          make
          make jar
          find '/home/runner/work/tsconline/tsconline/tscreator/jars/' -type f -name '*.jar' -exec cp {} '/home/runner/work/tsconline/tsconline/server/assets/jars/testUsageJar.jar' \;
          if [ -f "/home/runner/work/tsconline/tsconline/server/assets/jars/testUsageJar.jar" ]; then
            echo "Successfully made jar."
          else
            echo "Failed to make jar."
            exit 1
          fi

      - name: Install xvfb
        run: sudo apt-get install xvfb

      - name: Run Tests
        id: run_tests
        run: |
          Xvfb :1 -screen 0 1024x768x16 &
          export DISPLAY=:1
          set -o pipefail
          if ! yarn test > test_output.log 2>&1; then
              echo "test_failed=true" >> $GITHUB_OUTPUT
              fi
        continue-on-error: true

      - name: Report Test Errors
        if: steps.run_tests.outputs.test_failed == 'true'
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs');
            const testLog = fs.readFileSync('test_output.log', 'utf8');
            const prNumber = context.payload.pull_request?.number;
            if (prNumber) {
              const message = `ðŸš¨ Vitest tests have failed. Please check the test logs for more information.\n\n\`\`\`\n${testLog}\n\`\`\``;
              github.rest.issues.createComment({
                ...context.repo,
                issue_number: prNumber,
                body: message,
              });
            }
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for any test failures
        if: steps.run_tests.outputs.test_failed == 'true'
        run: exit 1
  setup-preview:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout CODEOWNERS file from main branch
        uses: Bhacaz/checkout-files@v2
        with:
          files: .github/CODEOWNERS
          branch: main

      - name: Check if PR author is a code owner
        id: check_codeowner
        run: |
          PR_AUTHOR=${{ github.event.pull_request.user.login }}
          CODEOWNERS=$(cat .github/CODEOWNERS)
          echo "PR Author: $PR_AUTHOR"
          echo "Code Owners: $CODEOWNERS"
          if echo "$CODEOWNERS" | grep -q "$PR_AUTHOR"; then
            echo "PR author is a code owner"
            exit 0
          else
            echo "PR author is not a code owner"
          fi

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H dev.geolex.org >> ~/.ssh/known_hosts

      - name: Transfer files
        run: |
          rsync -avz --exclude '.git' ./ deployuser@dev.geolex.org:/home/aaron/tsconline/pr-preview-${{ github.event.number }}/

      - name: Setup files for deployment preview
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: dev.geolex.org
          username: deployuser
          key: ${{ secrets.SSH_KEY }}
          script: |
            PR_NUMBER=${{ github.event.number }}
            CONTAINER_NAME="pr-preview-${PR_NUMBER}_pr-preview-run_1"
            cd /home/aaron/tsconline/pr-preview-${PR_NUMBER}
            if docker ps --filter "name=${CONTAINER_NAME}" | grep -q ${CONTAINER_NAME}; then
              echo "Container for PR ${PR_NUMBER} is already running. Rebuilding..."
              docker-compose -f docker-compose-preview.yml restart pr-preview-run
              MAX_WAIT=180
              INTERVAL=5
              ELAPSED=0
              START_TIME=$(date +"%Y-%m-%dT%H:%M:%SZ")
              while ! docker logs --since "$START_TIME" "$CONTAINER_NAME" 2>&1 | grep -q "Server listening on  { address: '0.0.0.0', family: 'IPv4', port: 3000 }"; do
                if [ $ELAPSED -ge $MAX_WAIT ]; then
                  echo "Max wait time exceeded. Exiting..."
                  docker-compose -f docker-compose-preview.yml down
                  exit 1
                fi
                echo "Waiting for server to start... (elapsed: ${ELAPSED}s)"
                sleep $INTERVAL
                ELAPSED=$((ELAPSED + INTERVAL))
              done
            else
              echo "Setting up files for PR #${PR_NUMBER}"
              cp ../server/assets/jars/* ./server/assets/jars/
              mkdir -p ./server/assets/datapacks
              cp ../server/assets/datapacks/* ./server/assets/datapacks/
              cp ../server/.env ./server
              cp ../app/.env ./app
              sed -i 's/^DOMAIN=.*/DOMAIN="pr-preview.geolex.org"/' ./server/.env
              docker-compose -f docker-compose-preview.yml up pr-preview-build
            fi
