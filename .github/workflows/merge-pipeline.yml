name: Merge Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened] # Runs on opening a pr, pushing to a pr, and reopening a pr
    branches:
      - main

jobs:
  check-files:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch specific branch
        run: git fetch origin main:main

      - name: Check for disallowed files and directories
        id: check_files
        run: |
          if git diff --name-only main...HEAD | grep -E 'node_modules/'; then
            echo "node_modules folder detected, please remove" > disallowed_files.txt
          fi
          if git diff --name-only main...HEAD | grep -E 'uploads/'; then
            echo "uploads folder detected, please remove" >> disallowed_files.txt
          fi
          if git diff --name-only main...HEAD | grep 'file-metadata.json'; then
            echo "file-metadata.json detected, please remove" >> disallowed_files.txt
          fi   
          git diff --name-only main...HEAD | grep -E '\.(dpk|mdpk|txt|map|java|jar|DS_Store|db)$' |grep -v -E '^server/__tests__/__data__/(encryption-test-keys/.*|.*)\.(dpk|txt)$' >> disallowed_files.txt || true
          if git diff --name-only main...HEAD | grep -E 'app/dist/|server/dist/|shared/dist'; then
            echo "dist folder detected, please remove" >> disallowed_files.txt
          fi
          if git diff --name-only main...HEAD | grep -E '\.yarn/cache/'; then
            echo ".yarn/cache folder detected, please remove" >> disallowed_files.txt
          fi
          if git diff --name-only main...HEAD | grep -E '\.pnp\..*'; then
            echo ".pnp.* files detected, please remove" >> disallowed_files.txt
          fi
          if git diff --name-only main...HEAD | grep 'package-lock.json'; then
            echo "package-lock.json detected, please remove" >> disallowed_files.txt
          fi
          if [ -s disallowed_files.txt ]; then
            echo "disallowed_files_present=true" >> $GITHUB_OUTPUT
          fi

      - name: Comment PR on disallowed files Failure
        if: steps.check_files.outputs.disallowed_files_present == 'true'
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs');
            const disallowed_files_output = fs.readFileSync('disallowed_files.txt', 'utf8');
            const message = `ðŸš¨ There are files in your PR you need to remove:\n\n\`\`\`\n${disallowed_files_output}\n\`\`\`\n`;
            const prNumber = context.payload.pull_request.number;
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: prNumber,
              body: message,
            });
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for any failures
        if: steps.check_files.outputs.disallowed_files_present == 'true'
        run: exit 1

  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: yarn install --immutable

      - name: Run ESLint
        id: eslint
        run: yarn lint-check > eslint-output.txt || echo "eslint_failed=true" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Comment PR on ESLint check failure
        if: steps.eslint.outputs.eslint_failed == 'true'
        uses: actions/github-script@v5
        with:
          script: |
            const fs = require('fs');
            const eslintOutput = fs.readFileSync('eslint-output.txt', 'utf8');
            const message = `ðŸš¨ The ESLint check has failed. Please address the following issues:\n\n\`\`\`\n${eslintOutput}\n\`\`\`\nRun 'yarn lint-format' locally to fix some of these issues automatically.`;
            const prNumber = context.payload.pull_request.number;
            github.rest.issues.createComment({
              ...context.repo,
              issue_number: prNumber,
              body: message,
            });
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Prettify code
        id: prettier
        run: |
          if ! yarn prettier-check; then
            echo "prettify_failed=true" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Comment PR on Prettier check failure
        if: steps.prettier.outputs.prettify_failed == 'true'
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            ðŸš¨ The Prettier check has failed. Please run 'yarn prettier-format' locally and commit the changes.

      - name: Check for any failures
        if: steps.eslint.outputs.eslint_failed == 'true' || steps.prettier.outputs.prettify_failed == 'true'
        run: exit 1

  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install Dependencies
        run: yarn install

      - name: Set up Decryption Jar and Datapacks
        if: github.event.pull_request.user.login != 'dependabot[bot]'
        run: |
          ACCESS_TOKEN=$(curl -s https://api.dropbox.com/oauth2/token -d refresh_token=${{ secrets.DROPBOX_REFRESH_TOKEN }} -d grant_type=refresh_token -d client_id=${{ secrets.DROPBOX_APP_KEY }} -d client_secret=${{ secrets.DROPBOX_APP_SECRET }} | jq -r '.access_token')
          DECRYPTION_NAME=$(jq -r '.decryptionJar' server/assets/config.json | xargs basename)
          if [ -z "$DECRYPTION_NAME" ]; then
            echo "Error: decryptionJar not found in config.json"
            exit 1
          fi
          DROPBOX_SHARED_LINK="${{ secrets.DROPBOX_SHARED_LINK }}"

          LIST_RESPONSE=$(curl -s -X POST "https://api.dropboxapi.com/2/files/list_folder" \
          --header "Authorization: Bearer $ACCESS_TOKEN" \
          --header "Content-Type: application/json" \
          --data "{\"path\": \"\", \"shared_link\": \"$DROPBOX_SHARED_LINK\"}")

          echo "List response: $LIST_RESPONSE"

          USER=$(curl -X POST https://api.dropboxapi.com/2/users/get_current_account \
          --header "Authorization: Bearer YOUR_ACCESS_TOKEN")

          echo "Current user: $USER"

          DECRYPTION_PATH=$(echo "$LIST_RESPONSE" | jq -r --arg DECRYPTION_NAME "$DECRYPTION_NAME" '.entries[] | select(.name == $DECRYPTION_NAME) | .path_lower')
          if [ -z "$DECRYPTION_PATH" ]; then
            echo "Error: Decryption jar not found."
            exit 1
          fi
          DATAPACKS_PATH=$(echo "$LIST_RESPONSE" | jq -r --arg DATA_PACKS_NAME "datapacks" '.entries[] | select(.name == $DATA_PACKS_NAME) | .path_lower')
          if [ -z "$DATAPACKS_PATH" ]; then
            echo "Error: Datapacks folder not found."
            exit 1
          fi

          curl -s -X POST "https://content.dropboxapi.com/2/files/download" \
          --header "Authorization: Bearer $ACCESS_TOKEN" \
          --header "Dropbox-API-Arg: {\"path\": \"$DECRYPTION_PATH\"}" \
          --output "${{ github.workspace }}/server/assets/jars/$DECRYPTION_NAME"

          DECRYPTION_JAR="${{ github.workspace }}/server/assets/jars/$DECRYPTION_NAME"
          if [ ! -f "$DECRYPTION_JAR" ]; then
            echo "Error: Failed to download decryption jar."
            exit 1
          fi
          echo "Successfully downloaded decryption jar."

          curl -s -X POST "https://content.dropboxapi.com/2/files/download_zip" \
          --header "Authorization: Bearer $ACCESS_TOKEN" \
          --header "Dropbox-API-Arg: {\"path\": \"$DATAPACKS_PATH\"}" \
          --output "${{ github.workspace }}/datapacks.zip"

          if [ ! -f "${{ github.workspace }}/datapacks.zip" ]; then
            echo "Error: Failed to download datapacks folder."
            exit 1
          fi
          unzip -q "${{ github.workspace }}/datapacks.zip" -d "${{ github.workspace }}/server/assets"
          rm "${{ github.workspace }}/datapacks.zip"
          if [ ! -d "${{ github.workspace }}/server/assets/datapacks" ]; then
            echo "Error: Failed to extract datapacks folder."
            exit 1
          fi
          echo "Successfully downloaded and extracted datapacks folder to assets/datapacks."

  wait-for-checks:
    runs-on: ubuntu-latest
    permissions:
      checks: read
    steps:
      - name: Wait for All Status Checks
        uses: poseidon/wait-for-status-checks@v0.4.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  setup-preview:
    needs: wait-for-checks
    if: github.event.pull_request.merged == false && github.event.pull_request.user.login != 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout CODEOWNERS file from main branch
        uses: Bhacaz/checkout-files@v2
        with:
          files: .github/CODEOWNERS
          branch: main

      - name: Check if PR author is a code owner
        if: github.event.pull_request.merged == false
        id: check_codeowner
        run: |
          PR_AUTHOR=${{ github.event.pull_request.user.login }}
          CODEOWNERS=$(cat .github/CODEOWNERS)
          echo "PR Author: $PR_AUTHOR"
          echo "Code Owners: $CODEOWNERS"
          if echo "$CODEOWNERS" | grep -q "$PR_AUTHOR"; then
            echo "PR author is a code owner"
            exit 0
          else
            echo "PR author is not a code owner"
            exit 1
          fi

      - name: Download PR Artifacts
        id: download_pr_artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DOWNLOAD_URL=$(gh api repos/${{ github.repository }}/actions/artifacts --paginate -q '.artifacts[] | select(.name == "build-artifacts-${{ github.event.number }}") | .archive_download_url' | head -n 1)
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "No build artifact found."
            exit 1
          else
            echo "Build download URL: $DOWNLOAD_URL"
            curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -L "$DOWNLOAD_URL" -o build-artifacts.zip
          fi
          if [ ! -f "build-artifacts.zip" ]; then
            echo "Error: build-artifacts.zip not found"
            exit 1
          fi
          DOWNLOAD_URL=$(gh api repos/${{ github.repository }}/actions/artifacts --paginate -q '.artifacts[] | select(.name == "jar-artifact-${{ github.event.number }}") | .archive_download_url' | head -n 1)
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "No jar artifact found."
          else
            echo "Jar download URL: $DOWNLOAD_URL"
            curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -L "$DOWNLOAD_URL" -o jar.zip
            unzip -q jar.zip
          fi
          if [ -f "jar.zip" ]; then
            echo "jar_download_status=success" >> $GITHUB_OUTPUT
            echo "jar_file=$(ls *.jar)" >> $GITHUB_OUTPUT
          else
            echo "jar_download_status=failed" >> $GITHUB_OUTPUT
          fi

      - name: Send Artifacts to Server
        run: |
          if [ ! -f "build-artifacts.zip" ]; then
            echo "Error: build-artifacts.zip not found"
            exit 1
          fi
          FILES_TO_SEND="build-artifacts.zip"
          if [ ${{ steps.download_pr_artifacts.outputs.jar_download_status }} == "success" ]; then
            FILES_TO_SEND="$FILES_TO_SEND ${{ steps.download_pr_artifacts.outputs.jar_file }}"
          fi

          echo "Sending files: $FILES_TO_SEND"
          echo "${{ secrets.SSH_KEY }}" > /tmp/ssh_key.pem
          chmod 600 /tmp/ssh_key.pem
          scp -o StrictHostKeyChecking=no -i /tmp/ssh_key.pem $FILES_TO_SEND deployuser@dev.geolex.org:/home/aaron/tsconline

      - name: Setup files for deployment preview
        if: github.event.pull_request.merged == false
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: dev.geolex.org
          username: deployuser
          key: ${{ secrets.SSH_KEY }}
          script: |
            PR_NUMBER=${{ github.event.number }}
            CONTAINER_NAME="pr-preview-${PR_NUMBER}_pr-preview-run_1"
            TSCONLINE_DIR="/home/aaron/tsconline"
            PR_PREVIEW_DIR="${TSCONLINE_DIR}/pr-preview-${PR_NUMBER}"
            HELP_DIR="${PR_PREVIEW_DIR}/server/assets/help"
            REPO_SSH="git@github.com:earthhistoryviz/tsconline-help.git"
            BRANCH="${{ github.event.pull_request.head.ref }}"
            cd "$TSCONLINE_DIR"

            if [ ! -d "$PR_PREVIEW_DIR" ]; then
              echo "Cloning branch $BRANCH for PR #${PR_NUMBER}"
              git clone --branch "$BRANCH" --depth 1 https://github.com/${{ github.repository }}.git "$PR_PREVIEW_DIR"
              echo "Setting up files for PR #${PR_NUMBER}"
              mkdir -p "$PR_PREVIEW_DIR/server/assets/jars"
              cp "$TSCONLINE_DIR/server/assets/jars/"* "$PR_PREVIEW_DIR/server/assets/jars/"
              mkdir -p "$PR_PREVIEW_DIR/server/assets/datapacks"
              cp "$TSCONLINE_DIR/server/assets/datapacks/"* "$PR_PREVIEW_DIR/server/assets/datapacks/"
              cp "$TSCONLINE_DIR/server/.env" "$PR_PREVIEW_DIR/server"
              cp "$TSCONLINE_DIR/app/.env" "$PR_PREVIEW_DIR/app"
              sed -i 's/^DOMAIN=.*/DOMAIN="pr-preview.geolex.org"/' "$PR_PREVIEW_DIR/server/.env"

              mkdir -p "$HELP_DIR"
              cd "$HELP_DIR"
              echo "Setting up help files for PR #${PR_NUMBER}"
              git init
              git remote add origin "$REPO_SSH"
              git config core.sparseCheckout true
              git config core.sparseCheckoutCone false
              echo "**/*.md" > .git/info/sparse-checkout
              git pull --depth=1 origin main
              echo "Sparse clone complete."
              cd "$TSCONLINE_DIR"
            else
              echo "Updating branch $BRANCH for PR #${PR_NUMBER}"
              git -C "$PR_PREVIEW_DIR" fetch origin "$BRANCH"
              git -C "$PR_PREVIEW_DIR" reset --hard "origin/$BRANCH"
              cp "$TSCONLINE_DIR/server/assets/jars/"* "$PR_PREVIEW_DIR/server/assets/jars/"
              cd "$HELP_DIR"
              git pull origin main
              cd "$TSCONLINE_DIR"
            fi

            unzip -q -o "build-artifacts.zip" -d "$PR_PREVIEW_DIR"
            rm "build-artifacts.zip"
            if [ -f "${{ steps.download_pr_artifacts.outputs.jar_file }}" ]; then
              mv "${{ steps.download_pr_artifacts.outputs.jar_file }}" "$PR_PREVIEW_DIR/server/assets/jars"
            fi

            cd "$PR_PREVIEW_DIR"
            docker-compose -f docker-compose-preview.yml up --build --remove-orphans pr-preview-install

            if docker ps --filter "name=${CONTAINER_NAME}" | grep -q ${CONTAINER_NAME}; then
              echo "Container for PR ${PR_NUMBER} is already running. Restarting..."
              docker-compose -f docker-compose-preview.yml restart pr-preview-run
              MAX_WAIT=180
              INTERVAL=5
              ELAPSED=0
              START_TIME=$(date +"%Y-%m-%dT%H:%M:%SZ")
              while ! docker logs --since "$START_TIME" "$CONTAINER_NAME" 2>&1 | grep -q "Server listening on  { address: '0.0.0.0', family: 'IPv4', port: 3000 }"; do
                if [ $ELAPSED -ge $MAX_WAIT ]; then
                  echo "Max wait time exceeded. Exiting..."
                  docker-compose -f docker-compose-preview.yml logs --tail=200 pr-preview-run
                  docker-compose -f docker-compose-preview.yml down
                  exit 1
                fi
                echo "Waiting for server to start... (elapsed: ${ELAPSED}s)"
                sleep $INTERVAL
                ELAPSED=$((ELAPSED + INTERVAL))
              done
              echo "Succesfully restarted container for PR #${PR_NUMBER}"
            fi
