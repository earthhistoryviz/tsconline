name: Deploy Preview

on:
  issue_comment:
    types: [created]

jobs:
  deploy-preview:
    if: ${{ github.event.issue.pull_request && github.event.comment.body == '/deploy' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout CODEOWNERS file from main branch
        uses: Bhacaz/checkout-files@v2
        with:
          files: .github/CODEOWNERS
          branch: main

      - name: Extract comment ID
        id: extract_comment
        run: echo "comment_id=$(jq -r '.comment.id' < $GITHUB_EVENT_PATH)" >> $GITHUB_OUTPUT

      - name: Extract commenter username
        id: extract_commenter
        run: echo "commenter=${{ github.event.comment.user.login }}" >> $GITHUB_OUTPUT

      - name: Check if commenter is a code owner
        id: code_owner_check
        run: |
          COMMENTER=${{ steps.extract_commenter.outputs.commenter }}
          CODEOWNERS=$(cat .github/CODEOWNERS)
          echo "Code Owners: $CODEOWNERS"
          echo "Commenter: $COMMENTER"
          if echo "$CODEOWNERS" | grep -q "$COMMENTER"; then
            echo "Commenter is a code owner"
            echo "is_code_owner=true" >> $GITHUB_OUTPUT
          else
            echo "Commenter is not a code owner"
            exit 1
          fi
        
      - name: React to comment
        uses: dkershner6/reaction-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commentId: ${{ steps.extract_comment.outputs.comment_id }}

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H dev.geolex.org >> ~/.ssh/known_hosts

      - name: Start up preview container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: dev.geolex.org
          username: deployuser
          key: ${{ secrets.SSH_KEY }}
          script: |
            if docker ps --filter "name=pr-preview-${{ github.event.issue.number }}" | grep -q pr-preview-run; then
              echo "false" > /tmp/container_status.txt
              exit 0
            fi
            if docker ps --filter "name=pr-preview" | grep -q pr-preview-run; then
              echo "true" > /tmp/container_status.txt
              exit 0
            fi
            echo "false" > /tmp/container_status.txt
            if [ ! -d /home/aaron/tsconline/pr-preview-${{ github.event.issue.number }} ]; then
              echo "Error: Directory /home/aaron/tsconline/pr-preview-${{ github.event.issue.number }} not found."
              exit 1
            fi
            cd /home/aaron/tsconline/pr-preview-${{ github.event.issue.number }}
            BUILD_CONTAINER_ID=$(docker-compose -f docker-compose-preview.yml ps -q pr-preview-build)
            if [ -n "$BUILD_CONTAINER_ID" ]; then
              docker wait $BUILD_CONTAINER_ID
            fi
            docker-compose -f docker-compose-preview.yml up -d --remove-orphans pr-preview-run

            CONTAINER_ID=$(docker-compose -f docker-compose-preview.yml ps -q pr-preview-run)
            if [ -z "$CONTAINER_ID" ]; then
              echo "Error: Failed to get container ID for pr-preview-run."
              exit 1
            fi

            MAX_WAIT=180
            INTERVAL=5
            ELAPSED=0

            START_TIME=$(date +"%Y-%m-%dT%H:%M:%SZ")

            while ! docker logs --since "$START_TIME" "$CONTAINER_ID" 2>&1 | grep -q "Server listening on  { address: '0.0.0.0', family: 'IPv4', port: 3000 }"; do
              if [ $ELAPSED -ge $MAX_WAIT ]; then
                echo "Max wait time exceeded. Exiting..."
                docker-compose -f docker-compose-preview.yml down
                exit 1
              fi
              echo "Waiting for server to start... (elapsed: ${ELAPSED}s)"
              sleep $INTERVAL
              ELAPSED=$((ELAPSED + INTERVAL))
            done

      - name: Fetch deployment status
        id: fetch_deployment_status
        run: |
          scp deployuser@dev.geolex.org:/tmp/container_status.txt ./container_status.txt
          status=$(cat ./container_status.txt)
          echo "container_running=$status" >> $GITHUB_OUTPUT
          ssh deployuser@dev.geolex.org "rm -f /tmp/container_status.txt"

      - name: Comment if container is already running
        if: ${{ steps.fetch_deployment_status.outputs.container_running == 'true' }}
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            ðŸš¨ A preview is already up for another PR. Please comment '/confirm-deploy' to bring down the current preview and deploy a new one.

      - name: Comment if container is not running or is for the same PR
        if: ${{ steps.fetch_deployment_status.outputs.container_running == 'false' }}
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            ðŸš€ Preview deployed! You can access it [here](https://pr-preview.geolex.org).
            To bring down the preview close the PR.

  confirm-deploy:
    if: ${{ github.event.issue.pull_request && github.event.comment.body == '/confirm-deploy' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout CODEOWNERS file from main branch
        uses: Bhacaz/checkout-files@v2
        with:
          files: .github/CODEOWNERS
          branch: main

      - name: Extract comment ID
        id: extract_comment
        run: echo "comment_id=$(jq -r '.comment.id' < $GITHUB_EVENT_PATH)" >> $GITHUB_OUTPUT

      - name: Extract commenter username
        id: extract_commenter
        run: echo "commenter=${{ github.event.comment.user.login }}" >> $GITHUB_OUTPUT

      - name: Check if commenter is a code owner
        id: code_owner_check
        run: |
          COMMENTER=${{ steps.extract_commenter.outputs.commenter }}
          CODEOWNERS=$(cat .github/CODEOWNERS)
          echo "Code Owners: $CODEOWNERS"
          echo "Commenter: $COMMENTER"
          if echo "$CODEOWNERS" | grep -q "$COMMENTER"; then
            echo "Commenter is a code owner"
            echo "is_code_owner=true" >> $GITHUB_OUTPUT
          else
            echo "Commenter is not a code owner"
            exit 1
          fi
        
      - name: React to comment
        uses: dkershner6/reaction-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commentId: ${{ steps.extract_comment.outputs.comment_id }}

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Add known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H dev.geolex.org >> ~/.ssh/known_hosts

      - name: Deploy preview
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: dev.geolex.org
          username: deployuser
          key: ${{ secrets.SSH_KEY }}
          script: |
            if [ ! -d /home/aaron/tsconline/pr-preview-${{ github.event.issue.number }} ]; then
              echo "Error: Directory /home/aaron/tsconline/pr-preview-${{ github.event.issue.number }} not found."
              exit 1
            fi
            cd /home/aaron/tsconline/pr-preview-${{ github.event.issue.number }}
            docker ps --filter "name=pr-preview" --format "{{.Names}}" | grep -oP "pr-preview-\K[0-9]+" > /tmp/running_pr.txt
            RUNNING_CONTAINER=$(docker ps --filter "name=pr-preview-run" --format "{{.ID}}")
            if [ -n "$RUNNING_CONTAINER" ]; then
              echo "Stopping and removing container $RUNNING_CONTAINER"
              docker stop $RUNNING_CONTAINER
              docker rm $RUNNING_CONTAINER
            fi 
            BUILD_CONTAINER_ID=$(docker-compose -f docker-compose-preview.yml ps -q pr-preview-build)
            if [ -n "$BUILD_CONTAINER_ID" ]; then
              docker wait $BUILD_CONTAINER_ID
            fi
            docker-compose -f docker-compose-preview.yml up -d --remove-orphans pr-preview-run
            CONTAINER_ID=$(docker-compose -f docker-compose-preview.yml ps -q pr-preview-run)
            if [ -z "$CONTAINER_ID" ]; then
              echo "Error: Failed to get container ID for pr-preview-run."
              exit 1
            fi

            START_TIME=$(date +"%Y-%m-%dT%H:%M:%SZ")

            MAX_WAIT=180
            INTERVAL=5
            ELAPSED=0

            while ! docker logs --since "$START_TIME" "$CONTAINER_ID" 2>&1 | grep -q "Server listening on  { address: '0.0.0.0', family: 'IPv4', port: 3000 }"; do
              if [ $ELAPSED -ge $MAX_WAIT ]; then
                echo "Max wait time exceeded. Exiting..."
                docker-compose -f docker-compose-preview.yml down
                exit 1
              fi
              echo "Waiting for server to start... (elapsed: ${ELAPSED}s)"
              sleep $INTERVAL
              ELAPSED=$((ELAPSED + INTERVAL))
            done

      - name: Fetch previous PR number
        id: fetch_previous_pr
        run: |
          scp deployuser@dev.geolex.org:/tmp/running_pr.txt ./running_pr.txt
          PR_NUMBER=$(cat ./running_pr.txt)
          echo "previous_pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

      - name: Comment on previous PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const previousPRNumber = "${{ steps.fetch_previous_pr.outputs.previous_pr_number }}";
            const comment = `The preview for this PR has been brought down by PR #${{ github.event.issue.number }}.`;
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: previousPRNumber,
              body: comment
            });

      - name: Comment preview link
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            ðŸš€ Preview deployed! You can access it [here](https://pr-preview.geolex.org).
            To bring down the preview close the PR.