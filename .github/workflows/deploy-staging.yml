name: Deploy Staging

concurrency:
  group: deploy-release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ vars.WEBSITE_URL }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Install dependencies
        run: yarn install

      - name: Build project
        run: yarn build

      - name: Archive build artifacts
        run: |
          zip -r -q build-artifacts.zip app/dist server/dist shared/dist

      - name: Parse Jar Name
        id: parse_jar_name
        run: |
          jar_name=$(jq -r '.activeJar' ${{ github.workspace }}/server/assets/config.json | xargs basename)
          echo "jar_name=$jar_name" >> $GITHUB_OUTPUT
  
      - name: Set up SSH key
        run: |
          eval $(ssh-agent)
          mkdir -p ~/.ssh
          echo "${{ secrets.JAVA_DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo -e "Host bitbucket.org\n\tAddKeysToAgent yes\n\tIdentityFile ~/.ssh/id_rsa" > ~/.ssh/config
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -H bitbucket.org >> ~/.ssh/known_hosts
  
      - name: Set up jdk
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "8"
          java-package: "jdk"
  
      - name: Checkout code and build jar
        run: |
          git clone git@bitbucket.org:strat/tscreator.git
          cd ${{ github.workspace }}/tscreator/devel
          make
          make jar
          find ${{ github.workspace }}/tscreator/jars/ -type f -name '*.jar' -exec cp {} ${{ github.workspace }}/${{ steps.parse_jar_name.outputs.jar_name }} \;
          if [ -f  ${{ github.workspace }}/${{ steps.parse_jar_name.outputs.jar_name }} ]; then
            echo "Successfully made jar."
          else
            echo "Failed to make jar."
            exit 1
          fi

      - name: Generate SHA256 checksum
        run: |
          sha256sum build-artifacts.zip > checksums.txt
          sha256sum ${{ steps.parse_jar_name.outputs.jar_name }} >> checksums.txt

      - name: Create Github Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build-artifacts.zip
            ${{ steps.parse_jar_name.outputs.jar_name }}
            checksums.txt

      - name: Download Datapacks from Dropbox
        run: |
          # --- Get the access token ---
          ACCESS_TOKEN=$(curl -s https://api.dropbox.com/oauth2/token -d refresh_token=${{ secrets.DROPBOX_REFRESH_TOKEN }} -d grant_type=refresh_token -d client_id=${{ secrets.DROPBOX_APP_KEY }} -d client_secret=${{ secrets.DROPBOX_APP_SECRET }} | jq -r '.access_token')

          # --- Download the datapacks ---
          DATAPACKS_PATH="${{ secrets.DROPBOX_PATH}}/datapacks"
          curl -X POST https://content.dropboxapi.com/2/files/download_zip \
            --header "Authorization: Bearer $ACCESS_TOKEN" \
            --header "Dropbox-API-Arg: {\"path\":\"$DATAPACKS_PATH\"}" \
            --output datapacks.zip

      - name: Download release build and create release-artifacts.zip
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir release
          mv datapacks.zip release
          gh release download ${{ github.ref_name }} -A=zip -D release
          gh release download ${{ github.ref_name }} -D release
          cd release
          unzip -q tsconline-*.zip
          rm tsconline-*.zip
          mv tsconline-*/* .
          rm -r tsconline-*
          rm checksums.txt
          touch secrets.env
          ls
          zip -r -q ../release-artifacts.zip *
  
      - name: Send Release Artifacts to Server
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key.pem
          chmod 600 /tmp/ssh_key.pem
          scp -o StrictHostKeyChecking=no -i /tmp/ssh_key.pem release-artifacts.zip ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ secrets.STAGING_PATH }}

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd ${{ secrets.STAGING_PATH }}

            unzip -q -o release-artifacts.zip -d ${{ secrets.STAGING_PATH }}
            rm release-artifacts.zip
            unzip -q -o build-artifacts.zip -d ${{ secrets.STAGING_PATH }}
            rm build-artifacts.zip
            mkdir -p ${{ secrets.STAGING_PATH }}/server/assets/jars
            mkdir -p ${{ secrets.STAGING_PATH }}/server/assets/datapacks
            mv ${{ steps.parse_jar_name.outputs.jar_name }} ${{ secrets.STAGING_PATH }}/server/assets/jars
            unzip -q -o datapacks.zip -d ${{ secrets.STAGING_PATH }}/server/assets/datapacks
            rm datapacks.zip

            echo 'EMAIL_USER="${{ secrets.EMAIL_USER }}"' > ./server/.env
            echo 'EMAIL_PASS="${{ secrets.EMAIL_PASS }}"' >> ./server/.env
            echo 'SESSION_KEY="${{ secrets.SESSION_KEY }}"' >> ./server/.env
            echo 'NODE_ENV="production"' >> ./server/.env
            echo 'RECAPTCHA_SECRET_KEY="${{ secrets.RECAPTCHA_SECRET_KEY }}"' >> ./server/.env
            echo 'APP_URL="${{ vars.WEBSITE_URL }}"' >> ./server/.env
            echo 'ADMIN_USER="${{ secrets.ADMIN_USER }}"' >> ./server/.env
            echo 'ADMIN_PASS="${{ secrets.ADMIN_PASS }}"' >> ./server/.env
            echo 'ADMIN_EMAIL="${{ secrets.ADMIN_EMAIL }}"' >> ./server/.env
            echo 'DOMAIN="tsconline.timescalecreator.org"' >> ./server/.env

            echo 'VITE_APP_URL=${{ vars.WEBSITE_URL }}' > ./app/.env
            echo 'VITE_SERVER_URL=${{ vars.WEBSITE_URL }}' >> ./app/.env

            if [ ! -f "docker-compose-server.yml" ]; then
              echo "Error: docker-compose-server.yml not found"
              exit 1
            fi

            docker compose -f docker-compose-server.yml restart

            START_TIME=$(date +"%Y-%m-%dT%H:%M:%SZ")

            sleep 5

            CONTAINER_ID=$(docker ps --filter "name=tsconline" --format "{{.ID}}")
            if [ -z "$CONTAINER_ID" ]; then
              echo "Error: Failed to get container ID for tsconline."
              exit 1
            fi

            MAX_WAIT=240
            INTERVAL=5
            ELAPSED=0

            while ! docker logs --since "$START_TIME" "$CONTAINER_ID" 2>&1 | grep -q "Server listening on  { address: '0.0.0.0', family: 'IPv4', port: 3000 }"; do
              if [ $ELAPSED -ge $MAX_WAIT ]; then
                echo "Max wait time exceeded. Exiting..."
                echo "Last 200 lines in container:"
                docker-compose -f docker-compose-server.yml logs --tail=200
                docker-compose -f docker-compose-server.yml down
                exit 1
              fi
              echo "Waiting for server to start... (elapsed: ${ELAPSED}s)"
              sleep $INTERVAL
              ELAPSED=$((ELAPSED + INTERVAL))
            done
