name: Deploy Development

concurrency:
  group: deploy-dev
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: 
      name: development
      url: ${{ vars.WEBSITE_URL }}
    steps:
      - name: Extract PR number from commit message
        id: extract_pr
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MESSAGE"
          PR_NUMBER=$(echo "$COMMIT_MESSAGE" | grep -oE '#[0-9]+' | tr -d '#')
          if [ -z "$PR_NUMBER" ]; then
            echo "No PR number detected in the commit message."
            echo "pr_number=" >> $GITHUB_OUTPUT
          else
            echo "Detected PR number: $PR_NUMBER"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          fi

      - name: Determine Download URL if PR number is present
        id: determine_download_url
        if: steps.extract_pr.outputs.pr_number != ''
        run: |
          DOWNLOAD_URL=$(gh api repos/earthhistoryviz/tsconline/actions/artifacts --paginate -q '.artifacts[] | select(.name == "build-artifacts-${{ steps.extract_pr.outputs.pr_number }}") | .archive_download_url' | head -n 1)
          echo "Download URL: $DOWNLOAD_URL"
          echo "download_url=$DOWNLOAD_URL" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        if: steps.extract_pr.outputs.pr_number != ''
        run: |
          curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -L "${{ steps.determine_download_url.outputs.download_url }}" -o build-artifacts.zip

      - name: Verify build artifacts
        id: verify_build_artifacts
        run: |
          if [ ! -f "build-artifacts.zip" ]; then
            echo "Error: build-artifacts.zip not found"
            echo "download_status=failed" >> $GITHUB_OUTPUT
          else
            echo "Downloaded build artifacts successfully"
            echo "download_status=success" >> $GITHUB_OUTPUT
          fi

      - name: Check if JAR artifact exists
        if: steps.extract_pr.outputs.pr_number != ''
        id: check_jar_artifact
        run: |
          if [ -f "build-artifacts.zip" ]; then
            unzip -l build-artifacts.zip | grep -q "server/dist/tsconline.jar"
            if [ $? -eq 0 ]; then
              echo "JAR artifact found"
              echo "jar_artifact=true" >> $GITHUB_OUTPUT
            else
              echo "JAR artifact not found"
              echo "jar_artifact=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Error: build-artifacts.zip not found"
            echo "jar_artifact=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        if: steps.verify_build_artifacts.outputs.download_status == 'false'
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: steps.verify_build_artifacts.outputs.download_status == 'false'
        uses: actions/setup-node@v3
        with:
          node-version: '21'

      - name: Install and build project
        if: steps.verify_build_artifacts.outputs.download_status == 'false'
        run: |
          yarn
          yarn build

      - name: Zip build artifacts
        if: steps.verify_build_artifacts.outputs.download_status == 'false'
        run: |
          zip -r build-artifacts.zip app/dist shared/dist server/dist

      

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.DEV_PATH }}

            git pull --no-edit

            PULL_STATUS=$?

            if [ $PULL_STATUS -eq 0 ]; then
              echo "git pull succeeded"
            else
              echo "git pull failed with exit status $PULL_STATUS"
              echo "General error: Possible reasons could include merge conflicts, network issues, or authentication problems."
              exit 1
            fi

            echo 'EMAIL_USER="${{ secrets.EMAIL_USER }}"' > ./server/.env
            echo 'EMAIL_PASS="${{ secrets.EMAIL_PASS }}"' >> ./server/.env
            echo 'SESSION_KEY="${{ secrets.SESSION_KEY }}"' >> ./server/.env
            echo 'NODE_ENV="production"' >> ./server/.env
            echo 'RECAPTCHA_SECRET_KEY="${{ secrets.RECAPTCHA_SECRET_KEY }}"' >> ./server/.env
            echo 'APP_URL="${{ vars.WEBSITE_URL }}"' >> ./server/.env
            echo 'ADMIN_USER="${{ secrets.ADMIN_USER }}"' >> ./server/.env
            echo 'ADMIN_PASS="${{ secrets.ADMIN_PASS }}"' >> ./server/.env
            echo 'ADMIN_EMAIL="${{ secrets.ADMIN_EMAIL }}"' >> ./server/.env
            echo 'DOMAIN="dev.timescalecreator.org"' >> ./server/.env

            echo 'VITE_APP_URL=${{ vars.WEBSITE_URL }}' > ./app/.env
            echo 'VITE_SERVER_URL=${{ vars.WEBSITE_URL }}' >> ./app/.env

            if [ ! -f "docker-compose-server.yml" ]; then
              echo "Error: docker-compose-server.yml not found"
              exit 1
            fi

            CONTAINER_ID=$(docker ps --filter "name=tsconline" --format "{{.ID}}")
            if [ -z "$CONTAINER_ID" ]; then
              echo "Container is not running. Bringing up the container..."
              docker-compose -f docker-compose-server.yml up -d
              if [ $? -ne 0 ]; then
                echo "Error: Failed to bring up the container."
                exit 1
              fi
            else
              echo "Container is already running. Restarting..."
              docker-compose -f docker-compose-server.yml restart
            fi

            START_TIME=$(date +"%Y-%m-%dT%H:%M:%SZ")
            sleep 5

            CONTAINER_ID=$(docker ps --filter "name=tsconline" --format "{{.ID}}")
            if [ -z "$CONTAINER_ID" ]; then
              echo "Error: Failed to get container ID for tsconline."
              exit 1
            fi

            MAX_WAIT=480
            INTERVAL=5
            ELAPSED=0

            while ! docker logs --since "$START_TIME" "$CONTAINER_ID" 2>&1 | grep -q "Server listening on  { address: '0.0.0.0', family: 'IPv4', port: 3000 }"; do
              if [ $ELAPSED -ge $MAX_WAIT ]; then
                echo "Max wait time exceeded. Exiting..."
                echo "Last 200 lines in container:"
                docker-compose -f docker-compose-server.yml logs --tail=200
                docker-compose -f docker-compose-server.yml stop
                exit 1
              fi
              echo "Waiting for server to start... (elapsed: ${ELAPSED}s)"
              sleep $INTERVAL
              ELAPSED=$((ELAPSED + INTERVAL))
            done