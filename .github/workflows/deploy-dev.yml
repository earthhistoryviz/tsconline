name: Deploy Development

concurrency:
  group: deploy-dev
on:
  push:
    branches:
      - TSC-577-send-artifacts-to-the-server-instead-of-deployments

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: 
      name: development
      url: ${{ vars.WEBSITE_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract PR number and commits
        id: extract_info
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MESSAGE"
          PR_NUMBER=$(echo "$COMMIT_MESSAGE" | grep -oE '#[0-9]+' | tr -d '#')
          if [ -z "$PR_NUMBER" ]; then
            echo "No PR number detected in the commit message."
            echo "pr_number=" >> $GITHUB_OUTPUT
          else
            echo "Detected PR number: $PR_NUMBER"
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          fi
          COMMITS=$(git rev-list ${{ github.event.before }}..${{ github.event.after }})
          echo "Commits included in the push: $COMMITS"
          echo "commits=$COMMITS" >> $GITHUB_OUTPUT

      - name: Download Build Artifacts if PR number is present
        id: download_build_artifacts
        if: steps.extract_info.outputs.pr_number != ''
        run: |
          DOWNLOAD_URL=$(gh api repos/${{ github.repository }}/actions/artifacts--paginate -q '.artifacts[] | select(.name == "build-artifacts-${{ steps.extract_info.outputs.pr_number }}") | .archive_download_url' | head -n 1)
          echo "Download URL: $DOWNLOAD_URL"
          curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -L "$DOWNLOAD_URL" -o build-artifacts.zip
          if [ -f "build-artifacts.zip" ]; then
            echo "build_download_status=success" >> $GITHUB_OUTPUT
          else
            echo "build_download_status=failed" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        if: steps.download_build_artifacts.outputs.build_download_status == 'failed'
        uses: actions/setup-node@v3
        with:
          node-version: '21'

      - name: Install and build project
        if: steps.download_build_artifacts.outputs.build_download_status == 'failed'
        run: |
          yarn
          yarn build
          zip -q -r build-artifacts.zip app/dist shared/dist server/dist  

      - name: Check if activeJar was modified and downlaod
        id: check_active_jar
        run: |
          ACTIVE_JAR_CHANGED=false
          NEW_ACTIVE_JAR=""

          for COMMIT in ${{ steps.extract_info.outputs.commits }}; do
            if git diff-tree --no-commit-id --name-only -r $COMMIT | grep -q "server/assets/config.json"; then
              NEW_JAR=$(git show $COMMIT:server/assets/config.json | jq -r '.activeJar' | xargs basename || echo "null")
              if [ "$NEW_JAR" != "null" ]; then
                echo "new_active_jar=$NEW_JAR" >> $GITHUB_OUTPUT
                echo "active_jar_changed=true" >> $GITHUB_OUTPUT
                DOWNLOAD_URL=$(gh api repos/${{ github.repository }}/actions/artifacts --paginate -q '.artifacts[] | select(.name == "${NEW_JAR}") | .archive_download_url' | head -n 1)
                curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -L "$DOWNLOAD_URL" -o "jar.zip"
                if [ -f "jar.zip" ]; then
                  echo "jar_download_status=success" >> $GITHUB_OUTPUT
                  unzip -q jar.zip -o $NEW_JAR
                else
                  echo "jar_download_status=failed" >> $GITHUB_OUTPUT
                fi
                break
              fi
            fi
          done

      - name: Determine if build is necessary
        id: build_necessary
        run: |
          if [ "${{ steps.check_active_jar.outputs.active_jar_changed }}" == "false" ]; then
            echo "Build is not necessary."
            echo "build_necessary=false" >> $GITHUB_OUTPUT
          elif [ "${{ steps.check_active_jar.outputs.jar_download_status }}" == "failed" ]; then
            echo "Build is necessary."
            echo "build_necessary=true" >> $GITHUB_OUTPUT
          fi

      - name: Set up SSH key
        if: steps.build_necessary.outputs.build_necessary == 'true'
        run: |
          eval $(ssh-agent)
          mkdir -p ~/.ssh
          echo "${{ secrets.JAVA_DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo -e "Host bitbucket.org\n\tAddKeysToAgent yes\n\tIdentityFile ~/.ssh/id_rsa" > ~/.ssh/config
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -H bitbucket.org >> ~/.ssh/known_hosts

      - name: Checkout code from Bitbucket
        if: steps.build_necessary.outputs.build_necessary == 'true'
        run: |
          git clone git@bitbucket.org:strat/tscreator.git

      - name: Set up jdk
        if: steps.build_necessary.outputs.build_necessary == 'true'
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "8"
          java-package: "jdk"

      - name: Build and compile TSCreator Jar
        if: steps.build_necessary.outputs.build_necessary == 'true'
        run: |
          cd ${{ github.workspace }}/tscreator/devel
          make
          make jar
          find ${{ github.workspace }}/tscreator/jars/ -type f -name '*.jar' -exec cp {} ${{ github.workspace }}/${{ steps.check_active_jar.outputs.new_active_jar }} \;
          if [ -f "${{ github.workspace }}/server/assets/jars/${{ steps.check_active_jar.outputs.new_active_jar }}" ]; then
            echo "Successfully made jar."
          else
            echo "Failed to make jar."
            exit 1
          fi

      - name: Send Artifacts to Server
        run: |
          FILES_TO_SEND="build-artifacts.zip"
          if [ "${{ steps.check_active_jar.outputs.jar_download_status }}" == "success" ]; then
            FILES_TO_SEND="$FILES_TO_SEND ${{ steps.check_active_jar.outputs.new_active_jar }}"
          fi
      
          echo "Sending files: $FILES_TO_SEND"
          echo "${{ secrets.SSH_KEY }}" > /tmp/ssh_key.pem
          chmod 600 /tmp/ssh_key.pem
          scp -o StrictHostKeyChecking=no -i /tmp/ssh_key.pem $FILES_TO_SEND ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ secrets.DEV_PATH }}

      # - name: Deploy to server
      #   uses: appleboy/ssh-action@v1.0.3
      #   with:
      #     host: ${{ secrets.SSH_HOST }}
      #     username: ${{ secrets.SSH_USERNAME }}
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     script: |
      #       cd ${{ secrets.DEV_PATH }}

      #       git pull --no-edit

      #       PULL_STATUS=$?

      #       if [ $PULL_STATUS -eq 0 ]; then
      #         echo "git pull succeeded"
      #       else
      #         echo "git pull failed with exit status $PULL_STATUS"
      #         echo "General error: Possible reasons could include merge conflicts, network issues, or authentication problems."
      #         exit 1
      #       fi

      #       unzip -o build-artifacts.zip -d ${{ secrets.DEV_PATH }}
      #       rm build-artifacts.zip
      #       if [ -f "${{ steps.check_active_jar.outputs.new_active_jar }}.zip" ]; then
      #         unzip -o ${{ steps.check_active_jar.outputs.new_active_jar }}.zip -d ${{ secrets.DEV_PATH }}/server/assets/jars
      #         rm ${{ steps.check_active_jar.outputs.new_active_jar }}.zip
      #       fi

      #       echo 'EMAIL_USER="${{ secrets.EMAIL_USER }}"' > ./server/.env
      #       echo 'EMAIL_PASS="${{ secrets.EMAIL_PASS }}"' >> ./server/.env
      #       echo 'SESSION_KEY="${{ secrets.SESSION_KEY }}"' >> ./server/.env
      #       echo 'NODE_ENV="production"' >> ./server/.env
      #       echo 'RECAPTCHA_SECRET_KEY="${{ secrets.RECAPTCHA_SECRET_KEY }}"' >> ./server/.env
      #       echo 'APP_URL="${{ vars.WEBSITE_URL }}"' >> ./server/.env
      #       echo 'ADMIN_USER="${{ secrets.ADMIN_USER }}"' >> ./server/.env
      #       echo 'ADMIN_PASS="${{ secrets.ADMIN_PASS }}"' >> ./server/.env
      #       echo 'ADMIN_EMAIL="${{ secrets.ADMIN_EMAIL }}"' >> ./server/.env
      #       echo 'DOMAIN="dev.timescalecreator.org"' >> ./server/.env

      #       echo 'VITE_APP_URL=${{ vars.WEBSITE_URL }}' > ./app/.env
      #       echo 'VITE_SERVER_URL=${{ vars.WEBSITE_URL }}' >> ./app/.env

      #       if [ ! -f "docker-compose-server.yml" ]; then
      #         echo "Error: docker-compose-server.yml not found"
      #         exit 1
      #       fi

      #       CONTAINER_ID=$(docker ps --filter "name=tsconline" --format "{{.ID}}")
      #       if [ -z "$CONTAINER_ID" ]; then
      #         echo "Container is not running. Bringing up the container..."
      #         docker-compose -f docker-compose-server.yml up -d
      #         if [ $? -ne 0 ]; then
      #           echo "Error: Failed to bring up the container."
      #           exit 1
      #         fi
      #       else
      #         echo "Container is already running. Restarting..."
      #         docker-compose -f docker-compose-server.yml restart
      #       fi

      #       START_TIME=$(date +"%Y-%m-%dT%H:%M:%SZ")
      #       sleep 5

      #       CONTAINER_ID=$(docker ps --filter "name=tsconline" --format "{{.ID}}")
      #       if [ -z "$CONTAINER_ID" ]; then
      #         echo "Error: Failed to get container ID for tsconline."
      #         exit 1
      #       fi

      #       MAX_WAIT=480
      #       INTERVAL=5
      #       ELAPSED=0

      #       while ! docker logs --since "$START_TIME" "$CONTAINER_ID" 2>&1 | grep -q "Server listening on  { address: '0.0.0.0', family: 'IPv4', port: 3000 }"; do
      #         if [ $ELAPSED -ge $MAX_WAIT ]; then
      #           echo "Max wait time exceeded. Exiting..."
      #           echo "Last 200 lines in container:"
      #           docker-compose -f docker-compose-server.yml logs --tail=200
      #           docker-compose -f docker-compose-server.yml stop
      #           exit 1
      #         fi
      #         echo "Waiting for server to start... (elapsed: ${ELAPSED}s)"
      #         sleep $INTERVAL
      #         ELAPSED=$((ELAPSED + INTERVAL))
      #       done